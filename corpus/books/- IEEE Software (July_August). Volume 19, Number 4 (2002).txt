***- IEEE Software (July_August). Volume 19, Number 4 (2002)***




































C o p y r i g h t  ©  2 0 0 2  S t e v e n  C .  M c C o n n e l l .  A l l  R i g h t s  R e s e r v e d . J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 5

from the editor

The Business of Software
Improvement

E d i t o r  i n  C h i e f :  S t e v e  M c C o n n e l l  � C o n s t r u x  S o f t w a r e  � s o f t w a r e @ c o n s t r u x . c o m

T
he return on investment in improved
software practices is well documented.
In 1994, James Herbsleb reported that
the average “business value” (roughly
the same as ROI) for 13 organizations
that took on CMM-SW-based improve-

ment programs was about 5 to 1, with the best
organizations realizing returns of 9 to 1.1 In
1995, Neil C. Olsen reported similar returns

for organizations that made signif-
icant investments in staffing, train-
ing, and work environments.2 In
2000, Capers Jones reported that
the ROI from process improve-
ment could easily go into double
digits (meaning returns greater
than 10 to 1).3 A recent analysis by
Watts Humphrey found that the
ROI for improved software prac-
tices could be in the neighborhood
of 4 to 1.4

Indirect benefits are even more
significant

The ROI figures in the published litera-
ture are based on operational savings—that
is, on reducing development cost per line of
code written or per function point delivered.
Although these savings are impressive, the
greater business benefit might arise from the
significant indirect returns that arise from
improved software practices. Better soft-
ware practices improve predictability of
costs and schedules, reduce risk of cost and
schedule overruns, provide early warning of
problems, and support better management. 

Many organizations that have focused on
improving their software practices have re-

ported improvements in predictability simi-
lar to the results in Figure 1.5 For a software
products company, what is the business
value of improving schedule estimation ac-
curacy from plus or minus 100 percent to
plus or minus 10 percent? What is the value
of being able to make a commitment to cus-
tomers six to 12 months in advance of a
scheduled completion date, with high confi-
dence of delivering on that commitment? 

For a company that develops custom
software, what is the business value of being
able to provide a fixed price bid with high
confidence that the project will not signifi-
cantly overrun the bid? 

For a retail sales organization, what is the
value of being able to plan cutover to a new
system with pinpoint accuracy? What is the
value of knowing with confidence that cut-
over will occur 1 October, as planned, with
little risk of overrunning to 15 November or
1 December? 

Unlike the operational benefits that most
of the industry literature has focused on,
these indirect benefits open the door to ad-
ditional revenue opportunities. These bene-
fits are based not on reducing costs, but on
increasing access to additional business. For
top decision makers in organizations, these
indirect benefits are often more compelling
than the direct, operational benefits. 

Organizational challenge
Considering the strong—even com-

pelling—case for improving software prac-
tices, it might seem surprising that some or-
ganizations have not made a commitment to
use best practices. I have recently been think-



6 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

FROM THE EDITOR

ing a lot about why best practices
aren’t used. Several factors seem to be
in play. 

First, there is a basic technology
transfer issue. Many software devel-
opment best practices have been
available for decades, but only a few
companies use them, and undergrad-
uate programs have not generally
taught these best practices. The
scarcity of experienced users of these
practices limits the rate at which cur-
rent users can train new users. Al-
though a person might reasonably
assume that the average software or-
ganization’s capability is halfway be-
tween the worst organization’s capa-
bility and the best’s, in reality, the
average software organization’s prac-
tices are much closer to the worst or-
ganization’s practices than the best’s.
The result is that software developers
who work in average organiza-
tions—which includes most develop-
ers—have never seen a really well-
run software project, much less a
really well-run software organiza-
tion. The software industry faces the
problem of bootstrapping best prac-
tices into common usage because of
limited current usage of them. 

A second factor is that recent eco-
nomic circumstances have prevented
software organizations from feeling
any strong imperative to switch to bet-
ter practices.6 Throughout the 1990s,
software-related companies rode a
technology wave that rewarded com-
panies just for being in the software in-

dustry. Companies didn’t need to focus
on operational improvements because
that would have shifted too much fo-
cus away from generating revenue. For
a time, improved software practices
seemed to be more of a distraction
than a help. 

A final factor is that many organi-
zations push responsibility for soft-
ware development improvement
down to the project level. In review-
ing the “effort multiplier” factors in
the Cocomo II estimation model,7 I
was struck by how few of the factors
are under the control of an individual
project manager. Of the 22 factors
Cocomo II uses to fine-tune a pro-
ject’s base effort estimate, in my judg-
ment only three are typically under
the individual project manager’s con-
trol: documentation, architecture
and risk resolution, and development
for reuse. Numerous factors are dic-
tated by the nature of the company’s
business—product complexity, re-
quired reliability, platform volatility,
unprecedentedness of the software,
and so on. A company cannot easily
change these factors without chang-
ing businesses. The remaining fac-
tors—staff capability, multisite devel-

DEPARTMENT EDITORS

Bookshelf: Warren Keuffel, 
wkeuffel@computer.org

Construction: Andy Hunt and Dave Thomas, 
Pragmatic Programmers, 

{Andy, Dave}@pragmaticprogrammer.com

Country Report: Deependra Moitra, Lucent Technologies
d.moitra@computer.org

Design: Martin Fowler, ThoughtWorks,
fowler@acm.org

Loyal Opposition: Robert Glass, Computing Trends,
rglass@indiana.edu

Manager: Don Reifer, Reifer Consultants,
dreifer@sprintmail.com

Quality Time: Jeffrey Voas, Cigital, 
voas@cigital.com

STAFF

Senior Lead Editor 
Dale C. Strok

dstrok@computer.org

Group Managing Editor
Crystal Chweh

Associate Editors
Jenny Ferrero, Shani Murray, and Dennis Taylor

Staff Editors
Scott L. Andresen and Kathy Clark-Fisher

Editorial Assistants
Rebecca Deuel and Ty Manuel 

Magazine Assistants
Dawn Craig, software@computer.org

Pauline Hosillos

Art Director
Toni Van Buskirk

Cover Illustration
Dirk Hagner

Technical Illustrator
Alex Torres

Production Assistant
Monette Velasco

Production Artists
Carmen Flores-Garvey and Larry Bauer

Executive Director
David Hennage

Publisher
Angela Burgess

Assistant Publisher
Dick Price

Membership/Circulation Marketing Manager
Georgann Carter

Advertising Assistant
Debbie Sims

CONTRIBUTING EDITORS

Greg Goth, Keri Schreiner, 
Joan Taylor, and Margaret Weatherford

Editorial: All submissions are subject to editing for clarity,
style, and space. Unless otherwise stated, bylined articles
and departments, as well as product and service descrip-
tions, reflect the author’s or firm’s opinion. Inclusion in
IEEE Software does not necessarily constitute endorsement
by the IEEE or the IEEE Computer Society.

To Submit: Send 2 electronic versions (1 word-processed
and 1 postscript or PDF) of articles to Magazine Assistant,
IEEE Software, 10662 Los Vaqueros Circle, PO Box 3014,
Los Alamitos, CA 90720-1314; software@computer.org. Ar-
ticles must be original and not exceed 5,400 words including
figures and tables, which count for 200 words each. 

600%

500%

400%

300%

200%

100%

0%
1 2 3

SW-CMM level

Predictability
before

improvement

Predictability
after

improvement

Ac
tu

al
 re

su
lts

 a
s 

a 
pe

rc
en

ta
ge

of
 e

st
im

at
ed

 re
su

lts

Figure 1. Project performance
compared to estimated 
performance.5 This example
demonstrates different projects
in the US Air Force.



J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 7

FROM THE EDITOR

opment, personnel continuity, pro-
cess maturity, and so on—can be in-
fluenced by the organization but not
by individual projects.

What can you do?
We could hope that upper man-

agement, sales, and marketing staff
would read every issue of IEEE Soft-
ware cover to cover or educate them-
selves about the finer nuances of soft-
ware development some other way.
But this isn’t likely to happen, so
leading software practitioners have
an ongoing responsibility: the educa-
tion of nontechnical software project
stakeholders. Software practitioners
sometimes perceive upper manage-
ment and other nontechnical staff to
be blocking the use of better prac-
tices. We complain that they fail to
support better practices or even un-
dermine them. I’ve generally found,
however, that upper management,
sales, marketing, product support,
and other personnel are receptive to
improved software practices when I
take the time to explain those prac-
tices to them. Indeed, they are
acutely aware of the problems caused
by current practices and are eager to

hear how they can help improve soft-
ware projects. 

What have you done to educate
executives about better software
practices? What has worked well for
you? I’d love to hear your comments
at stevemcc@construx.com. 

References
1. J. Herbsleb et al., Benefits of CMM Based

Software Process Improvement: Initial
Results, tech. report CMU/SEI-94-TR-13,
Software Eng. Inst., Carnegie Mellon Univ.,
Pittsburgh, 1994.

2. N.C. Olsen, “Survival of the Fastest: Improv-
ing Service Velocity,” IEEE Software, vol. 12,
no. 5, Sept./Oct. 1995, pp. 28–38.

3. C. Jones, Software Assessments, Benchmarks,
and Best Practices, Addison Wesley, Reading,
Mass., 2000. 

4. W. Humphrey, Winning with Software: An
Executive Strategy, Addison Wesley, Reading,
Mass., 2001. 

5. P.K. Lawlis, R.M. Flowe, and J.B. Thordahl,
“A Correlational Study of the CMM and Soft-
ware Development Performance,” Crosstalk,
Sept. 1995.

6. S. McConnell, After the Gold Rush, Microsoft
Press, Redmond, Wash., 1999.

7. B. Boehm et al., Software Cost Estimation
with Cocomo II, Addison Wesley, Reading,
Mass., 2000.

EDITOR IN CHIEF: 
Steve McConnell

10662 Los Vaqueros Circle
Los Alamitos, CA 90720-1314

software@construx.com

EDITOR IN CHIEF EMERITUS:
Alan M. Davis, Univ. of Colorado 

at Colorado Springs

ASSOCIATE EDITORS IN CHIEF

Design: Maarten Boasson, Quaerendo Invenietis
boasson@quaerendo.com

Construction: Terry Bollinger, Mitre Corp.
terry@mitre.org

Requirements: Christof Ebert, Alcatel Telecom
christof.ebert@alcatel.be

Management: Ann Miller, University of Missouri, Rolla
millera@ece.umr.edu

Quality: Jeffrey Voas, Cigital
voas@cigital.com

Experience Reports: Wolfgang Strigel, 
Software Productivity Center; strigel@spc.ca

EDITORIAL BOARD

Don Bagert, Texas Tech University
Richard Fairley, Oregon Graduate Institute

Martin Fowler, ThoughtWorks
Robert Glass, Computing Trends

Andy Hunt, Pragmatic Programmers
Warren Keuffel, independent consultant
Brian Lawrence, Coyote Valley Software

Karen Mackey, Cisco Systems
Deependra Moitra, Lucent Technologies, India

Don Reifer, Reifer Consultants
Suzanne Robertson, Atlantic Systems Guild

Dave Thomas, Pragmatic Programmers

INDUSTRY ADVISORY BOARD

Robert Cochran, Catalyst Software (chair) 
Annie Kuntzmann-Combelles, Q-Labs

Enrique Draier, PSINet
Eric Horvitz, Microsoft Research

David Hsiao, Cisco Systems
Takaya Ishida, Mitsubishi Electric Corp.

Dehua Ju, ASTI Shanghai
Donna Kasperson, Science Applications International

Pavle Knaflic, Hermes SoftLab
Wojtek Kozaczynski, Rational Software Corp.

Tomoo Matsubara, Matsubara Consulting
Masao Matsumoto, Univ. of Tsukuba

Dorothy McKinney, Lockheed Martin Space Systems
Nancy Mead, Software Engineering Institute

Stephen Mellor, Project Technology
Susan Mickel, AgileTV

Dave Moore, Vulcan Northwest
Melissa Murphy, Sandia National Laboratories

Kiyoh Nakamura, Fujitsu
Grant Rule, Software Measurement Services

Girish Seshagiri, Advanced Information Services
Chandra Shekaran, Microsoft

Martyn Thomas, Praxis
Rob Thomsett, The Thomsett Company 

John Vu, The Boeing Company
Simon Wright, Integrated Chipware

Tsuneo Yamaura, Hitachi Software Engineering

MAGAZINE OPERATIONS COMMITTEE

George Cybenko (chair), James H. Aylor, Thomas J.
Bergin, Frank Ferrante, Forouzan Golshani, Rajesh
Gupta, Steve McConnell, Ken Sakamura, M. Satya-

narayanan, Nigel Shadbolt, Munindar P. Singh,
Francis Sullivan, James J. Thomas

PUBLICATIONS BOARD

Rangachar Kasturi (chair), Jean Bacon, Mark Chris-
tensen, George Cybenko, Gabriella Sannitti di Baja,

Lee Giles, Thomas Keefe, Dick Kemmerer, 
Anand Tripathi

Call for Articles: Industry Experience Reports
Experience reports with lessons learned in industry are one way to

share successes or failures with others who likely face similar situa-
tions. We invite you to report on a technology or process you intro-
duced in your company, analyze its impact, and explore what you
would do differently the next time.

Articles should be 2,000 to 2,400 words with each illustration
counting as 200 words. We also encourage you to submit up to 10
short bullet points on lessons learned and references to related Web
sites. Submissions are reviewed by members of our Industry Advisory
Board and are subject to editing for style, clarity, and space.

For detailed author guidelines, see computer.org/software/genres.
htm#IndustryExperienceReport or contact software@computer.org.
Submissions are accepted at any time.

Associate Editor: Wolfgang B. Strigel, Software Productivity Cen-
ter, strigel@spc.ca.



1 2 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2 0 7 4 0 - 7 4 5 9 / 0 2 / $ 1 7 . 0 0  ©  2 0 0 2  I E E E

O
ne of the most talked-about concepts in
network security—the idea of an Un-
derwriters’ Laboratories-type seal of
approval for hardware and software—
is about to take full flight. Beginning 1
July, new products deemed to be part

of systems with US national security implica-
tions must be certified under one of several in-
formation assurance schemes and tested by in-

dependent laboratories working in
concert with colleagues from the
federal government.

However, whether the new
standards will usher in an era of
consistency and assurance for sys-
tems developers and customers is
uncertain. While many vendors
and security experts applaud the
effort as an important—and
workable—step in the quest for a
more secure Internet, others think

the concept is paradoxically simplistic and
confusing.

“I think the idea of a UL-type approval is
very noble, but I think it will be very difficult
to implement at this point,” says Marty Lind-
ner, team leader of incident handling at the
Software Engineering Institute’s CERT Coor-
dination Center. “Even if you did the UL stuff
at the design phase, you’re only certifying
that a perfect implementation of the code is
believed to be secure. If you take what has
been built and test that, you’re testing it
based on what we know current vulnerabili-
ties or vectors are. For example, buffer over-
flow would be a vector. That isn’t to say
somebody comes up with a clever way of do-
ing something six months from now that we

don’t know about. Would this null and void
the UL? That’s the more challenging part.”

Yet many vendors and the public sector
people in charge of the new effort believe it
to be a critical step in providing incentive to
design and build better products.

“In reality, there is no such thing as a se-
cure system,” says Ron Ross, director of the
National Information Assurance Partner-
ship, which oversees the new certification
program. The NIAP is administered jointly
by the National Institute for Standards and
Technology (NIST) and the National Secu-
rity Agency. “What we’re talking about is
putting in as much security and getting as
much assurance about the system as we can
possibly afford, given our respective mis-
sions. Everybody’s mission is different,
everybody’s perception of how much risk
they can handle is different. It’s the product
evaluation that gives you more information
and confidence about what goes into the
system, and that’s a good starting point.”

Common Criteria for the common
good

The linchpin of the new security and as-
surance effort is product certification under
one of two standards: the Common Crite-
ria, a graduated set of assurance levels rec-
ognized by 14 nations, or the Federal Infor-
mation Processing Standard (FIPS)-140.
Under the guidelines of a federal policy
known as NSTISSP 11, federal purchasers
of network components that have national
security implications must ensure these
products have received certification under
either of these standards. Vendors say the

in the news

Will the Cyber-UL 
Concept Take Hold?
Greg Goth, gregorygoth@compuserve.com

F e a t u r e s  E d i t o r :  S c o t t  L .  A n d r e s e n  � s a n d r e s e n @ c o m p u t e r . o r g

Whether the 
new standards
will usher in 
a new era of

consistency is
uncertain.



J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 1 3

IN THE NEWS

Common Criteria’s international
scope will strengthen the market.

“The Common Criteria is the big
one for a couple of reasons,” says
Mary Ann Davidson, chief security
officer at Oracle. “First of all, it’s an
ISO standard, so that carries some
weight. Second of all, we used to do
country-specific evaluations, which
were really expensive. We did ITSEC
[the old Western European stan-
dard], the Orange Book [the US De-
fense Department standard], and the
Russian criteria.

“Through the mutual recognition
provision of the Common Criteria, if
you get evaluation up to a certain
level, everyone says ‘That’s good
enough for me,’ as opposed to some-
thing developed by a US-specific
body, which may have other agendas.
This is a true international standard.”

Davidson testified before a US
House of Representatives Armed Ser-
vices Committee subcommittee that
the mandated security evaluations
will provide three main benefits:

� A more secure product, through
the steps of the evaluation

� A secure development process,
through the evaluators’ review of
product security architecture,
functional, design, and test specifi-
cations, which ensures a secure de-
velopment process is repeatable

� A culture of security, through the
completion of multiple evalua-
tions, that makes security part of
the corporate “DNA” over the
long term

“I like that the Common Criteria
forces a secure development process,”
Davidson says. “It’s not so much slap-
ping it on at the end as bells and whis-
tles. Jumping through this hoop at the
end of your development process just
isn’t good enough.

“It doesn’t mean you don’t have se-
curity vulnerabilities, but you at least
have to develop a process where people
have to think about security. Another
plus is that if the evaluators find a big
honking security hole, they won’t give
you the seal of approval until you fix it.
If you found one of those five years

down the pike, it would be a multiplat-
form, multirelease problem. That pays
for the cost of the evaluation.”

An IBM product—a cryptographic
security chip—was the first to receive
Common Criteria approval in No-
vember 2001. Ernie Ovies, product
manager for the chip, says the effort
will give customers assurance the
product does what it says.

“When we put this chip on the
motherboard, we wanted to make
sure our customers knew it had been
verified independently. I don’t think
it’s lip service. I think it’s going to be
with us for a long time.”

Ovies estimated the process, from
conceiving the chip’s design to receiv-
ing certification, took about 18
months. During the design and eval-
uation phases, IBM and the chip’s
manufacturer, Atmel, worked closely
with the approved testing lab, Cy-
gnaCom. This collaboration might
have saved the designers much time
and effort.

“We developed a security target,
defining what part of it had the secu-
rity function in it,” Ovies says. “This

defines the scope of certification. We
thought about including some of the
APIs that belong to Microsoft, for
example, which the lab said would
take years.”

Meeting Common Criteria specifi-
cations could offer an opportunity
for vendors of specialized compo-
nents entree into larger systems if
they cannot afford to develop and
evaluate them.

“Hardware, particularly for cryp-
tographic mechanisms, is rightly per-
ceived as more secure, so it has a
higher assurance level,” Davidson
says. “The other nice thing about it is
that if you have a card or chip with a
cryptographic mechanism, it doesn’t
mean the software vendor is off the
hook. It means you can plug some-
thing into your system that does
some of the cryptographic mecha-
nism and get a level of assurance
from that.”

The Common Criteria’s graduated
levels of testing are called Evaluation
Assurance Levels. Those deemed
most workable for commercial prod-
ucts are Levels One through Four,



1 4 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

IN THE NEWS

with the following requirements for
reaching each level as stated in Com-
mon Criteria documentation:

� EAL1 (functionally tested) is applic-
able where some confidence in cor-
rect operation is required but the
threats to security are not consid-
ered to be serious. Its value comes
when independent assurance is re-
quired to verify due that care was
exercised with respect to the protec-
tion of personal or similar informa-
tion. This level provides an evalua-
tion of the Target of Evaluation
(TOE) as made available to the con-
sumer, including independent test-
ing against a specification and an
examination of the guidance docu-
mentation provided.

� EAL2 (structurally tested) requires
the developer’s cooperation in
terms of design information and
test result delivery but should not
demand more effort on the devel-
oper’s part than is consistent with
good commercial practice. As such,
it should not require a substantially
increased investment of cost or
time. EAL2 is applicable in those
circumstances where developers or
users require a low to moderate
level of independently assured se-
curity in the absence of the com-
plete development record. Such a
situation can arise when securing
legacy systems or where access to
the developer is limited.

� EAL3 (methodically tested and
checked) permits a conscientious
developer to gain maximum assur-
ance from positive security engi-
neering at the design stage without
substantial alteration of existing
sound development practices. It is
applicable in those circumstances
where developers or users require
a moderate level of independently
assured security and a thorough
investigation of the TOE and its de-
velopment without incurring sub-
stantial reengineering costs. An
EAL3 evaluation provides an analy-
sis supported by “gray box” testing,
selective confirmation of the devel-
oper test results, and evidence of a
developer search for obvious vulner-

abilities. Development environmen-
tal controls and TOE configuration
management are also required.

� EAL4 (methodically designed, tested,
and reviewed) permits a developer
to maximize assurance gained
from positive security engineering
based on good commercial devel-
opment practices. Although rigor-
ous, these practices do not require
substantial specialist knowledge,
skills, or other resources. EAL4 is
the highest level at which it is eco-
nomically feasible to retrofit an ex-
isting product line. It is applicable
in those circumstances where de-
velopers or users require a moder-
ate to high level of independently
assured security in conventional
commodity TOE, and are pre-
pared to incur additional security-
specific engineering costs. An
EAL4 evaluation provides an
analysis supported by the low-level
design of the TOE’s modules, and
a subset of the implementation.
Testing is supported by an inde-
pendent search for vulnerabilities.
Development controls are sup-
ported by a life-cycle model, iden-
tification of tools, and automated
configuration management.

NIAP Director Ross says the grad-
uated Common Criteria standards
are a significant advance over the
previous Orange Book standards.
“The Orange Book was fairly rigid in
structure and was primarily devel-
oped to define requirements for gen-
eral-purpose operating systems and
the development of those systems.
The Common Criteria gives us great
flexibility to define requirements for
security in key technologies like op-
erating systems, databases, firewalls,
biometrics, and smart cards.”

Currently, there are seven accred-
ited testing labs in the US, three in
Canada and Germany, four in the
United Kingdom and France, and
two in Australia.

Ross doesn’t foresee a land rush in
labs asking to be certified. 

“I don’t know how many labs we
can sustain. I know NSTISSP 11 is dri-
ving a lot of companies to get their
product evaluated, so there may be a
large ramp-up because of that, but at
some point we’ll reach a steady state in
supply and demand in terms of the
evaluation process,” he says. “Some
labs may get in the business and find
there’s not enough work. Others may
be overwhelmed. A lot of labs, though,
could use their NIAP approval as an
entree to do some consulting. That’s
allowed as long as they don’t evaluate
anything they’ve worked on. There are
strict guidelines to protect against con-
flict of interest.”

Testing the testers
Laboratories must submit to a

three-step process to become accred-
ited. Those steps include 

� Developing a quality manual that
will become the testing bible for
the lab, pursuant to ISO standards

� Completing a proficiency test ad-
ministered by NIAP assessors 

� An onsite assessment of the lab by
examiners working for the Na-
tional Voluntary Laboratory Ac-
creditation Program, the NIST of-
fice responsible for the process

“It takes about a year to become
accredited from the time the lab first

“It takes about a 
year to become
accredited from 
the time the lab 
first submits a 

letter stating its 
interest to the NIAP 

to the time
it actually gets 

its certification.”



J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 1 5

IN THE NEWS

submits a letter stating its interest to
the NIAP to the time it actually gets its
certification,” Ross says. “It takes a
long time to get a quality manual to-
gether if you don’t have one. The pro-
ficiency tests are fairly extensive. And
the labs have ongoing business, so a
lot of the accreditation process takes
time away from normal business.”

Ken Kolstad is director of opera-
tions for InfoGard Laboratories, in
San Luis Obispo, California. Info-
Gard, which was founded in 1993,
was the first lab in the US to become
FIPS certified but is still awaiting its
Common Criteria accreditation.

Kolstad says an early survey of its
customers met with lukewarm en-
thusiasm for Common Criteria eval-
uations, so InfoGard put its applica-
tion on hold. A combination of
events in the autumn of 2001, how-
ever, led those customers to recon-
sider, and InfoGard is once again in
the accreditation process.

“Business has been swamped since
9/11,” Kolstad says, explaining the
surge in security matters. “Our cus-
tomer base is suddenly seeing a de-
mand overseas for Common Criteria-
certified products. There’s also a big
demand for FIPS overseas, so that
business has increased substantially.”

Booz Allen Hamilton received its
laboratory accreditation in March.
Steve Rome, recently named lab di-
rector, says customer interest in re-
ceiving Common Criteria certification
is steadily increasing. Joe Mahaffee,
who oversees the lab’s NIAP pro-
gram, says interest is not confined to
companies within the US, but it is go-
ing to market its niche closer to
home, focusing on products under
consideration for use by the federal
government.

Rome believes the future of certifi-
cation will be centered not on indi-
vidual products but on systems.

“I think the 1 July deadline shows
the government is serious about mak-
ing sure its acquisitions are products
we know something about,” he says.
“It’s not going to change the world.
The attitude of the NSA has always
been incremental steps toward adding
security, and this is a good first one.

When they get into systems certifica-
tion, it will be another big step.”

Ball of confusion?
The likelihood that complex sys-

tems will eventually require some
sort of evaluation and certification
might be the biggest area of uncer-
tainty in the entire concept. For ex-
ample, if a defense contractor clerk
sends a federal agency counterpart a
spreadsheet breakdown of costs for a
vehicle part, will the spreadsheet and
email applications on their desktops
need certification? If so, under which
program? Common Criteria? Or,
perhaps, benchmarks released by the
nonprofit Center for Internet Secu-
rity, or an evaluation done under
CERT’s Survivable Systems Analysis
method?

“This will all be incredibly confus-

ing,” says cryptography expert Bruce
Schneier, cofounder of Counterpane
Internet Security. “And even worse,
the Common Criteria doesn’t even
mandate anything. It’s just a frame-
work. I can define a protection scheme
of ‘Don’t bother with any security’ and
then accurately claim that my system
conforms to the Common Criteria.”

The NIAP’s Ross concedes there
will be confusion and overlap.

“The danger is that the average per-
son doesn’t understand the difference
between the Common Criteria, the
CIS, and CERT,” he says. “These pro-
grams do different things. The Com-
mon Criteria is a much more technical
evaluation. It looks at the internals of
these products, the way they’re de-
signed and developed, and the sophis-
tication of the software development
techniques that were used to build
them. The CIS benchmarks look at
what these products do once they’re
configured—when they come out of
the box.

“You can spend a lot of time and
effort on a Common Criteria evalua-
tion and if that product is configured
improperly or used by people who
don’t understand it, you may just as
well never have done it. So, I look at
these programs as being kind of com-
plementary,” Ross says. “We all
know what each of us does, and I
think we need to do a better job of
telling people. When I go out and talk
about the Common Criteria, I should
also talk about these other programs
and how they relate to ours. Some
people might say it gives the other
guys a competitive advantage. I say it
doesn’t. We’re trying to position our-
selves in the marketplace. We all have
a niche, and that niche must be made
very clear.” 

“Our customer base is
suddenly seeing a

demand overseas for
Common Criteria-
certified products.
There’s also a big
demand for FIPS
overseas, so that

business has increased
substantially.”

Useful URLs

Common Criteria: www.commoncriteria.org 
CERT Coordination Center: www.cert.org/nav/index_main.html 
NIST’s Common Criteria: http://csrc.nist.gov/cc 
NIST’s NVLAP: http://ts.nist.gov/ts/htdocs/210/214/214.htm



1 6 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2 0 7 4 0 - 7 4 5 9 / 0 2 / $ 1 7 . 0 0  ©  2 0 0 2  I E E E

T
he software industry seems to be em-
bracing yet another change to the way
it does business. Because of their em-
phasis on agility and time-to-market,
many programming shops are moving
to agile methods. Unlike more tradi-

tional approaches, these methods focus on
generating early releases of working products

using mostly collaborative tech-
niques such as pair programming,
refactoring, and having customers
work on site as team members.
Programmers use these releases—
which are working products, not
prototypes—to demonstrate fea-
tures and functions to stakehold-
ers involved in their use, market-
ing, and support. 

This article surveys the experi-
ence software engineers in a wide

range of industries have had in deploying
agile methods. 

The survey
Fads come and go, in software engineering

as in everything else. Practitioners want to
know if agile methods are real or just more
hype. To answer that question, I surveyed 10
industry segments using the approach illus-
trated in Figure 1. I designed the survey to 

� Determine what practices early adopters
of agile methods are using

� Assess the scope and conditions govern-
ing their use

� Evaluate the costs and benefits associated
with their use

Table 1 summarizes the demographics of
the 32 organizations, representing 28 firms,
that responded (several large firms had more
than one organization trying to use agile
techniques). To transfer a technology, these
firms use it on a pilot to prove to themselves
that it works, use it on a pathfinder to de-
termine how to integrate the technology
with their processes, and then move it onto
production projects.  As expected, five of the
14 firms that responded are involved in e-
commerce and e-business applications. The
information these early adopters supplied
gives us insight into how to tap the power of
these emerging practices.

The 14 firms using agile methods cited a
laundry list of practices as agile: collective
ownership, concurrent development, contin-
uous integration, customer collaboration,
daily standup meetings, product demos in-
stead of documents, Extreme Programming
(XP), frequent product releases, full stake-
holder participation, individuals and interac-
tions, just-in-time requirements, metaphors
instead of architectures, nightly product
builds, pair programming, rapid application
development, refactoring, retrospectives, sto-
ries for requirements, team programming,
and test-driven development.

The database’s 31 projects showed that
those firms pursuing agile methods were
motivated because they had a poor record of
delivering acceptable products to market on
time and within budget. Most projects were
relatively small (typically fewer than 10 par-
ticipants) and were pursued as pilots or
pathfinders. All projects were in-house de-

manager

How Good Are Agile 
Methods?

E d i t o r :  D o n a l d  J .  R e i f e r  � R e i f e r  C o n s u l t a n t s  � d . r e i f e r @ i e e e . o r g



J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 1 7

MANAGER

velopments (as opposed to con-
tracted out), lasting one year or less
and involving low-risk methods. 

Furthermore, the firms character-
ized their projects as having stable re-
quirements, established architectures,
and a high degree of development flex-
ibility. Products under development
were mostly quick-to-market applica-
tions (generally Web-based and client-
server oriented). Teams were cohesive
and staffed with motivated, experi-
enced performers, most of whom were
relatively young and thus perhaps
more open to new ideas. Although
there was some skepticism, most prac-
titioners involved with agile methods
were enthusiastic about the prospects.

Although software engineers in
the various industries differed on
what constituted best agile practices,
invariably they agreed that a project’s
process must be cyclical and involve
builds and increments done in par-
allel. Furthermore, they said, these
projects must involve collaborative or-
ganizations that include participation
by all stakeholders during develop-
ment. These projects always included
full-time participation by customers or
users while the work was being done,
rather than relying on reviews, and re-
sulted in working product demos, not
documents or prototypes that are of-
ten thrown away.

Differences arose in the actual form
of the process used, such as spiral,

incremental, or similar methods, as well
as on how informal or flexible the
process should be. The engineers in
different industries disagreed on who
the stakeholders were and how deep
their involvement should be. Opinions
differed as well on what practices fell
under the category of agile meth-
ods—Extreme Programming, rapid
application development, team pro-
gramming, and so on.

The biggest surprise was that most
responding organizations were at
Level 2 or greater under the Software
Capability Maturity Model (see Table
2). For the most part, these advanced
organizations were willing to try some-
thing new because they were having
problems meeting delivery expecta-

tions even though their pro-cesses
were mature. Also, most of the orga-
nizations trying agile methods were
modifying their processes to incorpo-
rate those that worked into their way
of doing business.

The results so far
In summarizing the results either

measured or observed by these early
adopter organizations, seven of the
14 organizations that used agile
methods captured hard cost, produc-
tivity, and quality data. Five of these
had benchmarks that they could use
for comparisons. Hard data included

� Productivity improvement: 15 to
23 percent average gain based on
published industry benchmarks.2

� Cost reduction: 5 to 7 percent on
average based on published indus-
try benchmarks.2

� Time-to-market compression: 25
to 50 percent less time compared
to previous projects in participat-
ing firms.

� Quality improvement: Five firms
had data showing that their defect
rates were on par with their other
projects when products or appli-
cations were released. 

These numbers normalize contribu-
tions of all participating firms inde-
pendent of their CMM levels.

In addition, the seven organiza-
tions that didn’t capture hard data
used soft data to justify their move to

Information from
questionnaires and interviews

Firm up
survey goals

Goals

Literature search

Questionnaire

Interviews

1

Develop
survey instrument

2

Publish results
and conclusions

Findings

IEEE Software/XP Agile UniverseInterest

5

Develop
findings

4

Canvas broad
spectrum of industry
3Mailing

lists

Figure 1. Survey approach showing steps taken to access industry
response to XP methods.

Table 1

Characteristics of responding firms
Firms using Year State Average size

Industry agile methods Projects first tried of progress (KESLOC)*
Aerospace 1 1 2001 Pathfinder 23
Computer 2 3 2000 Pilot 32
Consultants 1 2 2000 Pilot 25
E-business 5 15 2000 Production 33
Researchers 1 1 2000 Pilot 12
Scientific 0 0 2001 Pilot N/A
Software 2 4 2000 Production 25
Telecom 2 5 2000 Production 42
Total 14 31 Average 31.8

*KESLOC = thousand equivalent source lines of code computed using formulas that normalize reused
and modified code in terms of new lines of code (see Barry Boehm’s discussion of the mathematical ap-
proach involved).1



1 8 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

MANAGER

agile methods. Most used some form
of survey to capture stakeholder
opinions, and all used recruitment,
morale, and other intangibles to build
a case for trying and retaining agile
methods. All argued passionately for
continued use of agile methods based
on qualitative factors, and all pressed
for help in resolving the issues that re-
volved around technology transfer.

In any case, the jury is still out be-
cause the sample size (14 organiza-
tions and 31 projects) is just too small
to derive any firm conclusions. In ad-

dition, the “hard” data gathered
might be tainted by the Hawthorne ef-
fect common in efforts of this type,
which relates to the small sample size.
(These were small, low-risk projects
staffed by select teams under con-
trolled situations, so the results might
neither scale to larger projects nor re-
flect higher-risk situations.) We will
just have to see if agile methods can
scale to address larger efforts.

The percentages I’ve cited can be
deceptive. Although cost, schedule,
productivity, and quality are related,

they must be considered separately.
For example, as we all well know, de-
creasing cost by accepting reduced
quality can accelerate schedule but
result in lost market share. And in-
creasing productivity could increase
a company’s cost as software staff is
busily producing the wrong product.
In such cases, rework increases as
does schedule.1

I n the “Survey summary and recom-mendations” sidebar, I’ve organizedmy findings by the questions the
survey sought to answer. Recommen-
dations are aimed at addressing key is-
sues identified by early adopters. I
hope this initial report from the field
on agile methods prompts others to
put their experiences in the public do-
main. I am currently preparing a pa-
per detailing this survey’s findings for
presentation at XP Agile Universe. If
you’re interested in this topic but can-
not attend, contact me for a copy of
that paper. 

References
1. D.J. Reifer, Making the Software Business

Care: Improvements by the Numbers, Addi-
son-Wesley, Reading, Mass., 2002.

2. D.J. Reifer, “Let the Numbers Do the Talk-
ing,” Crosstalk, Mar. 2002, pp. 4–8.

Donald J. Reifer is president of Reifer Consultants and a vis-
iting associate at the Center for Software Engineering at the Univer-
sity of Southern California. Contact him at d.reifer@ieee.org. He’d
like to hear from you.

Table 2

Software CMM ratings of responding firms
Industry Number of agile projects Level 1 Level 2 Level 3 Level 4 Level 5 No Rating
Aerospace 1 1
Computer 3 3
Consultants 2 1 1
E-business 15 6 1 8
Researchers 1 1
Scientific 0
Software 4 2 2
Telecom 5 2 2 1
Totals 31 12 6 4 1 8 

Survey Summary and Recommendations

Questions asked and responses
What do users think agile methods are?
� Devised list of variants and invariants based on user perceptions, not on a  

search.
Who’s using agile methods?
� Small, in-house teams developing software for quick-to-market applications.
Do they provide added value?
� Although reports from the field were positive, the sample was too small to

make any broad conclusions.
What are the issues plaguing users?
� Most issues revolve around classical problems in managing technology change.

Recommendations
� Clearly define what “agile methods” means.
� Build a business case for agile methods using “hard” data to justify the move.
� When adopting agile methods, recognize that you are changing the way

your organization does business.
� Provide those moving to agile methods with support for making the transition.

Support should include startup guidelines, “how to” checklists, and measure-
ment wizards; a knowledge base of past experience accessible by all; and
education and training, including distance education and self-study courses.



2 0 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2 0 7 4 0 - 7 4 5 9 / 0 2 / $ 1 7 . 0 0  ©  2 0 0 2  I E E E

T
he traditional job of the requirements
analyst is to talk to users, find out how
they work, ask them what they want,
specify what is required, and have a sys-
tem built. But something’s missing: this
activity doesn’t improve anything. We

need a step in the requirements ac-
tivity called “invent something
better.” This column is about how
to go about doing that. 

Reinventing your role
Software designer Dewys Las-

don puts it simply: “Our job is to
give the client, on time and on
cost, not what he wants, but what
he never dreamed he wanted; and
when he gets it, he recognizes it as

something he wanted all the time.” (Read
more about Lasdon in Tom Peters’, The Cir-
cle of Innovation: You Can’t Shrink from
Greatness, Knopf, 1997.) This applies to you,
even if you’re working on yet another inven-
tory control system or the 18th incarnation
of your management information system. To
be successful in today’s software world, you
must add the title “inventor” to your portfo-
lio. Let me explain why, and suggest how you
might become an inventor. 

The user interface you look at whenever
you use your personal computer is an inven-
tion, but when the team at Xerox PARC was
inventing it, nobody was asking for it. What

about your mobile telephone? Before it was
invented, people didn’t go around saying, “I
really wish I had a telephone that I could
carry in my pocket.” What about the cool
personal digital assistant you bought re-
cently? Before you knew it existed, did you
think to ask for one? But now that you have
it, and a mobile telephone, could you get
along without them? 

Paradoxically, we must avoid becoming
victims of our customers. Our task is not to
provide every button and pull-down menu
enhancement that they ask for, but to invent
a completely new way of working—one that
will thrill and amaze them. Once users see it,
they will wonder how they got along before.
If you confine yourself to making marginal
improvements, someone else will make the
inspirational leap and take your customer
along for the ride. 

A new list of requirements
In the IT world, there are guides about

what we should invent and how to go about
inventing something better for the client.
Consider the following partial list as poten-
tial requirements. At least one of them repre-
sents an area where you can invent something
to make a difference to your organization. 

Service is a requirement
In today’s commoditized world, quality

of service separates one business from an-

requirements
Eureka! 
Why Analysts Should 
Invent Requirements
James Robertson

E d i t o r :  S u z a n n e  R o b e r t s o n  � T h e  A t l a n t i c  S y s t e m s  G u i l d  � s u z a n n e @ s y s t e m s g u i l d . c o m

We often hear the complaint “The customer didn’t tell us the project requirements.” Here,
James Robertson takes the opposite view and encourages requirements analysts to create more
valuable and competitive products by inventing requirements rather than expecting customers
to ask for them.—Suzanne Robertson



J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 2 1

REQUIREMENTS

other. If all banks charge the same
fee, you will give your business to the
one that provides the best service.
Federal Express started asking peo-
ple to pay US $21 for what formerly
cost 21 cents. Enough people valued
guaranteed next-day service to make
FedEx the second largest airline (in
number of airplanes) in the US. 

Service means understanding what
your customers will value if you give
it to them. In the UK, unlike conti-
nental Europe, we drive on the right-
hand side of the road. To overcome
this obstacle for continental vaca-
tions, Hertz offers “Le Swap.” You
rent a car in England, drive it to
Folkestone, and put it on Le Shuttle
train to France (the price of Le Shut-
tle ticket is included in the rental
cost). On the French side of the tun-
nel at Calais, you drive to the Hertz
depot, and they give you a French car
with left-hand drive. On the way
back, you reverse the process. Hertz
realized that this is a service people
would value. Someone at Hertz in-
vented a better way of renting a car. 

What service could your organiza-
tion provide that your customers
would value? For example, can you do
something for them that they currently
do for themselves? Can you provide a
service that will make your customer
value you over your competitors? 

Some products are ideas
Post-it notes are an idea. The in-

ventor had the idea that bits of paper
with removable adhesive would be
useful. When they saw Post-its,
everybody in the 3M offices wanted
them. The rest is history. 

eBay is an idea. Meg Whitman had
the simple idea of putting auctions on
the Internet. eBay registered 10 mil-
lion users in its first five years—not
bad for an idea that in retrospect is
pretty simple. Napster took less than
one year to get to one million users,
and estimates of music downloads
from it today run into the tens of bil-
lions. I know that the product was
free, but look at the idea: peer-to-peer
networking by strangers. Abstract a
little. Can you come up with some-
thing else from these ideas or better

still, make one of your own? How
does your organization handle its
ideas? Does it have a way of hearing
them? How could you listen harder
and avoid missing the next eBay idea?

Information is a requirement
Put another way, it is a require-

ment to provide information. Today’s
consumers and customers are far bet-
ter informed than they were a gener-
ation ago. If an organization refuses
to provide information, it can look
forward to a departing customer. 

Your customers already have lots
of information, and they expect more
of it, which means that you must in-
vent a way to give them access to
your company’s information. Do you
provide all your rates and prices? Do
you also provide your competitors’
rates? Do you provide all the infor-
mation your customer needs to make
a buying decision? What is it that
your organization knows, or could
know, that your customers would
also like to know? In other words, in-
vent some way of getting more infor-
mation to the outside world. 

Customers want choices
Your customers want more choices

to suit their own particular require-
ments. Charles Schwab (www.schwab.
com) lets customers make choices on-
line or via telephone that were for-
merly made only by brokers and certi-
fied financial advisors. 

Dell and Gateway encourage cus-

tomers to configure their own com-
puters (and place their own orders).
There is a competitive advantage to
providing better choices than the
other guy. Do you provide your cus-
tomers with all the information you
have so that they can make their own
choice? Do you show them all their
choices? The National Association of
Realtors (www.realtor.com) offers
the choice of over 1.5 million proper-
ties on its Web site and gets 30 mil-
lion hits per month. 

People also want to do more of the
work themselves. FedEx, DHL, and
UPS spent millions on systems that let
customers participate in the delivery
process. Visit FedEx’s online tracking
sytem  (www.fedex.com/us/tracking),
and look at the options it provides.
People are happy to do more of the
work themselves, and if they’re doing
the work themselves, they are far less
likely to complain about the service.

People do not want to sit back and
be told how they should deal with
your company. They want to decide
for themselves. Do your customers
participate in your business? If not,
invent some way to make your cus-
tomers part of it. 

The real origin of the use case is 
outside your organization 

If you want to invent a better
product, start by thinking outside the
box. I find it dismaying when I talk
to analysts who only draw use case
models in which the actor is someone
who works inside the organization.
This approach prevents the analyst
from understanding the real business
problem.

Imagine that we’re dealing with a
business use case. That is, it starts
outside your organization. Now,
what happened before the internal
actor became involved? Who was do-
ing what to trigger this business use
case? Progressive Insurance (www.
progressive.com) has a fleet of Imme-
diate Response Vehicles. If you have
an accident (and you are insured
with Progressive), an IRV comes to
the accident scene. The driver is a
trained insurance assessor who can
immediately assess the damage to

Your customers 
already have lots of

information, and they
expect more of it, 

which means that you
must invent a way to give

them access to your
company’s information.



2 2 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

REQUIREMENTS

your car and (if you choose) pay your
claim and give you a check on the
spot. In other words, Progressive has

realized that the real origin of the
business use case is the accident, not
the filling out of the claim, and de-
cidedly not the actor in the insurance
company who starts to enter the
claim into a computer system. 

For any use case, consider the fol-
lowing: what was the person (there is
usually a person involved, and it
could well be your customer) doing
when the business use case started? A
use case does not start when the bank
customer reaches the ATM and in-
serts a card. What was the customer
doing before that? Why did he or she
come to the ATM? If it was for
money, what was that money for?
Could you (the bank) invent some-
thing that would help the customer
avoid having to go to the ATM at all?
And if he or she does reach the ATM,
what else can you do? Add more
time to a prepaid cell phone? Make
a transfer to pay for an eBay pur-
chase? Offer to send details of your
special mortgage rates or new sav-
ings accounts? You could even put up
an ATM screen that says, “If you

would you like us to (e)mail you in-
formation on our new brokerage ser-
vice, touch here.” 

Amazon.com has links all over the
Web on other peoples’ sites. It recog-
nizes that the origin of the book-buy-
ing business use case is when a reader
decides that he or she wants a book.
Amazon’s Associates program pro-
vides an incentive for sites to add a
“Buy it from Amazon.com” link.
This captures the real actor at the
real point of origin. I don’t know
how much revenue Amazon’s Associ-
ates links generate, but I imagine it is
a healthy chunk of their earnings. 

What can you do? Look at any use
case. Now, back away from the com-
puter system, back past the employee
who operates the computer, back
past the incoming paper or telephone
call to the employee, and go back to
the outside world where real people
(probably your customers) live. What
are those people doing at the time of
initiating the business use case? Can
you do it for them? Can you invent
something that will make it easier for
them to use your organization’s re-
sources? If you know what they are
doing, then you can do it for them.
When you invent something that gets
to the use case’s true origin, you cap-
ture—and keep—a loyal customer. 

W hat sets you apart from yourcompetitors? The difference isinvention. That spark, that idea,
that moment of human thought that
makes the difference between a great
product or service and one that is
merely adequate. 

We might not need any more soft-
ware, but we will certainly buy it if it
is appealing and innovative—that is, if
it promises to add some compelling
new value to the way we work, live,
travel, and go about our lives. In other
words, we will buy inventions.

James Robertson is a founder and principal of the 
Atlantic Systems Guild. He provides organizations with training
and consulting on how they can leverage their requirements
process to build better, more innovative software products. 
Contact him at james@systemsguild.com.

Recommended Reading
C. Christensen, The Innovator’s

Dilemma, Harvard Business School
Press, Cambridge, Mass., 1997. 

N. Gershenfeld, When Things
Start to Think, Henry Holt & Co.,
New York, 1999.

T. Kelley, The Art of Innovation:
Lessons in Creativity from IDEO,
America’s Leading Design Firm,
Doubleday, New York, 2000. 

T. Peters, The Circle of Innovation,
Alfred A. Knopf, New York, 1997. 

J. Robertson and S. Robertson,
Mastering the Requirements
Process, Addison-Wesley, Reading
Mass., 1999.

M. Schrage, Serious Play, Har-
vard Business School Press, Cam-
bridge, Mass., 2000. 



focus
Initiating Software 
Product Lines

John D. McGregor, Clemson University and Luminary Software

Linda M. Northrop, Software Engineering Institute

Salah Jarrad, Panasonic Wireless Design Center

Klaus Pohl, University of Essen

E
li Whitney revolutionized
the manufacturing of rifles
using interchangeable parts.
Henry Ford did the same

for automobiles, integrating the idea
of interchangeable parts and an as-
sembly line. A growing number of
software development organizations
are adopting approaches that empha-
size proactive reuse, interchangeable
components, and multiproduct plan-
ning cycles to construct high-quality
products faster and cheaper. Standard
methods, referred to as software prod-
uct line or software family practices,
have developed around these ap-
proaches. This special issue focuses on
the technical, managerial, and organi-
zational activities related to introduc-
ing these practices. 

guest editors’ introduction

2 4 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2 0 7 4 0 - 7 4 5 9 / 0 2 / $ 1 7 . 0 0  ©  2 0 0 2  I E E E



Introducing product line practices into
an organization typically involves many lev-
els of the enterprise. Organizations have
employed two main types of strategies when
introducing software product lines: heavy-
weight and lightweight. With heavyweight
strategies, a product line’s initial product
costs significantly more than an initial prod-
uct in single-system development (see Figure
1). However, after approximately three
products, the product line has lower cumu-
lative costs. In contrast, lightweight strate-
gies require minimal upfront investment.
The initial cost falls somewhere between the
single-product cost and heavyweight cost
(see Figure 1). The tradeoff for lower up-
front costs is that it takes longer to reduce
cumulative costs. 

Early adopters of these two approaches
have been rewarded with significant im-
provement in productivity, time to market,
and product costs. Companies such as Cum-
mins, which took a heavyweight approach,
and Nokia, with its lightweight approach,
have reported successful experiences.1

The keys to success
Three ideas are common to most success-

ful product line efforts: exploring common-
ality among products to proactively reuse
software artifacts, encouraging architecture-
centric development, and having a two-
tiered organizational structure.

Exploring commonalities and variabilities 
Software developers have been interested

in building multiple systems with similar re-
quirements for years. In 1976, David Parnas
stated, “We consider a set of programs to
constitute a family whenever it is worthwhile
to study programs from the set by first study-
ing the common properties of the set and
then determining the special properties of the
individual family members.”2 This definition
focuses on a set of programs’ common prop-
erties, regardless of how you implement the
programs. More recently, the Software Engi-
neering Institute’s Product Line Practices ini-
tiative has defined a software product line as
“a set of software-intensive systems sharing a
common, managed set of features that satisfy
the specific needs of a particular market seg-
ment or mission and that are developed from
a common set of core assets in a prescribed
way.”3 This definition focuses on the com-
mon properties of products and the common
technologies used to implement programs.

A product line’s scope is specified such
that the products have a high degree of com-
monality. A product line organization real-
izes economically significant reuse, which so
many earlier reuse approaches failed to de-
liver, by exploiting this commonality to
achieve economies of scope. Product lines
use proactive approaches that plan the use of
assets in multiple products rather than ad
hoc approaches that reuse assets only if they
happen to be suitable. 

600,000

500,000

400,000

300,000

200,000

100,000

o
1 2 3

Number of products
4 5

Cu
m

ul
at

iv
e 

co
st

s 
of

 p
ro

du
ct

s 
(U

S 
do

lla
rs

)

Single product
Heavyweight
Lightweight

Figure 1. A 
comparison of 
heavyweight and
lightweight strategies
and single-system
development.

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 2 5



Besides the commonalities, products in a
product line also vary in their features. To
allow for controlled variation, analysts and
software architects introduce so-called vari-
ation points on each level of abstraction (for
example, on the level of the requirements,
architecture, and runtime system). As expe-
rienced in the major European product line
initiatives, Esaps (www.esi.es/esaps) and
Café (www.esi.es/café), product line vari-
ability has two major dimensions: a time di-
mension, which deals with the evolution of
software artifacts over time, and a space di-
mension, which deals with software’s differ-
ent behaviors (for example, a software arti-
fact used in multiple products might need to
exhibit different behaviors).4

The degree to which an organization
must create a comprehensive, robust set of
assets before delivering its first product
varies from one initiation method to an-
other. In heavyweight initiation schemes, the
organization creates or acquires assets to
satisfy the specifications in the product line
architecture before creating the products. In
lightweight initiation schemes, the organiza-
tion mines assets from existing products and
products currently in production. 

Architecture-centric development
The software architecture is key to a soft-

ware product line’s success.  An architecture
that specifies all of the products identifies
and communicates the regions of common-
ality and points of variation. A product
team creates the product-specific architec-
tures by specializing the product line archi-
tecture to achieve specific functional and
quality requirements. 

The software architecture creation
process includes techniques that let archi-
tects make design choices that enhance cer-
tain qualities of the system and degrade oth-
ers. The architects design the product line
architecture to support the range of values
for each quality attribute necessary to repre-
sent all products. Developers then construct
each product by selecting reusable assets
that result in the appropriate quality values.

The degree to which an organization
must formally define an inclusive, complete
software architecture before delivering its
first product varies from one approach to
another. For example, reference architec-
tures in specific domains can provide both a

starting point for the product line architec-
ture and support for early decisions about
the first product if the product line architec-
ture is not sufficiently complete.

Two-tiered organization
An organization using product line prac-

tices is structured to facilitate two funda-
mental roles: development of reusable assets
and development of products that use those
assets. The first role includes all products
while the second focuses on a single prod-
uct. Organizations accomplish this division
of responsibility in a variety of ways—some
have teams dedicated to each role and oth-
ers use the same people for both.

Product line practices affect many parts of
an organization. Roles such as product plan-
ning or marketing will change from a single-
product focus to working with a set of re-
lated products and can take advantage of the
product line approach. Planning a set of
products at one time as opposed to individu-
ally over time produces economies of scale. 

The degree to which organizational
changes must occur before delivering the first
product varies. In heavyweight approaches,
the organization assigns specific teams to
produce assets such as the architecture and
components. In lightweight approaches, the
organization might create the first few prod-
ucts as usual and then use mining efforts to
extract product line assets after the fact.

Issue overview
In the Point/Counterpoint department,

Paul Clements of the Software Engineering
Institute argues the advantages of thorough
planning and design before constructing
products. Charles Kreuger of BigLever Soft-
ware counters this view by supporting an
approach that develops reusable assets
while products are being constructed.

The first two articles survey the major ini-
tiatives in developing product line practices. In
“SEI’s Software Product Line Tenets,” Linda
M. Northrop describes a comprehensive set of
practices that have evolved from the experi-
ence of initiating product lines in a variety of
industrial domains and government agencies.
In “Software Product Families in Europe: The
Esaps & Café Projects,” Frank van der Linden
summarizes the challenges faced and lessons
learned when introducing software product
lines in European companies. 

2 6 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2



The next two articles address general issues
related to introducing a product line. “The
Economic Impact of Product Line Adoption
and Evolution,” by Klaus Schmid and Martin
Verlage, describes decisions that must be made
when initiating a product line and presents
economic arguments that help guide the deci-
sion-making process. “Feature-Oriented Prod-
uct Line Engineering,” by Kyo C. Kang, Jae-
joon Lee, and Patrick Donohoe, describes the
central role that product features can play in
product line development. Using feature-ori-
ented domain analysis and the feature-ori-
ented reuse method, the authors illustrate how
to use features as the guiding principle behind
product development.

The final two articles report on industrial
experiences gained when introducing a soft-
ware product line. “Modeling and Using
Product Line Variability in Automotive Sys-
tems,” by Steffen Thiel and Andreas Hein,
describes the pervasiveness of variability
when operating a product line. The article
presents a study of the systematic planning
and variability management that occurs in a
product line to achieve strategic reuse. “De-
veloping Mobile Browsers in a Product
Line,” by Ari Jaaksi, provides a look inside
an organization as it evolves to meet the de-
mands for faster, cheaper development. The
article provides a valuable set of lessons that
the team learned during the evolution of the
organization.

References
1. P. Donohoe, Software Product Lines: Experience and Re-

search Directions, Kluwer, Dordrecht, Netherlands, 2000.
2. D.L. Parnas, “On the Design and Development of Pro-

gram Families,” IEEE Trans. Software Eng., vol. SE2,
no. 1, Mar. 1976, pp. 1–9.

3. P. Clements and L. Northrop, Software Product Lines:
Practices and Patterns, Addison-Wesley, Boston, 2001.

4. J. Bosch et al., “Variability Issues in Software Product
Lines,” Proc. 4th Int’l Workshop Product Family Eng.
(PFE-4), Lecture Notes in Computer Science, Springer
Verlag, Berlin, 2001, pp. 13–21.

About the Authors

John D. McGregor is an associate professor of computer science at Clemson University
and a partner in Luminary Software, a software engineering consulting firm. His research in-
terests are software product lines and component-based software engineering. He received his
PhD from Vanderbilt University. Contact him at the Dept. of Computer Science, Clemson Univer-
sity, Clemson, SC 29634; johnmc@lumsoft.com.

Linda M. Northrop is director of the Product Line Systems Program at the Software
Engineering Institute. Her research interests include software architecture, software product
lines, and the predictable assembly of certifiable components. She received her undergraduate
degree from LeMoyne College and her graduate degrees from the State University of New York
and the University of Rochester. Contact her at the Software Eng. Inst., Carnegie Mellon Univ.,
Pittsburgh, PA 15213-3890; lmn@sei.cmu.edu.

Salah Jarrad is vice president of Software and Systems at MMCD, Panasonic Wireless De-
sign Center. Contact him at MMCD, Panasonic Wireless Design Center, 1226 NorthBrook Pkwy,
Suwanee, GA 30024; sjarrad@panasonicatlanta.com.

Klaus Pohl is full professor for software systems engineering and the director of the Insti-
tute for Computer Science at the University of Essen. His research interests include scenario-
centered requirements management and requirements-driven software product line develop-
ment. He received a degree in computer science from FH Karlsruhe, Germany, a degree in
information systems from the Univ. Konstanz, Germany, and a PhD in computer science from
the Technical University of Aachen, Germany. Contact him at Software Systems Eng., Univ. of
Essen, Altendorferstr. 97-101,45117, Essen, Germany; pohl@cs.uni-essen.de.

This supplemental CD will contain peer-reviewed multimedia con-

tent such as 2D and 3D simulations and animations, standalone in-

teractive tutorials, and demonstrations of application examples. The

CD will not duplicate any current electronic or print content.

Subscribe today!
http://computer.org/cga

Check it out
A Free CD-ROM 

with Your 
CG&A Subscription

IEEE

AND A PPLICAT IONS



Being Proactive 
Pays Off

Paul Clements

2 8 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2 0 7 4 0 - 7 4 5 9 / 0 2 / $ 1 7 . 0 0  ©  2 0 0 2  I E E E

S
oftware product lines repre-
sent a paradigm on the rise
in software engineering that
comes with true order-of-
magnitude improvements in
cost, schedule, and quality.

As the field grows and matures, case stud-
ies are becoming more plentiful and bene-
ficial. Books, papers, conferences, work-
shops, and special issues of magazines
such as this one provide ideas that can in-
spire us. 

For me, one of the most exciting as-
pects of software product lines is how
they put technical and enterprise issues
on the same page. This is best demon-
strated when a software product line ca-
pability helps a savvy organization
quickly enter and thrive in a whole new
market area. CelsiusTech Systems, a
Swedish seller of shipboard command-
and-control systems, recognized that a
new market lay nearby in ground-based
air defense systems—guns mounted on
moving platforms. On the first day Cel-
siusTech decided to enter that market, 40
percent of its entry system was complete
because of its roots in a ship system prod-
uct line.1 Cummins, an American manu-

facturer of diesel engines, recognized that
a vast untapped market in industrial
diesel engines lay right next to its product
line of (software-intensive) automotive
and truck diesel engines. The industrial
diesel domain encompasses an extraordi-
nary range of applications, from ski lifts
to rock crushers, but no single applica-
tion is a high-volume proposition. With-
out the capability to field a product vari-
ant quickly and easily, the market is not
attractive. But with that capability—that
is, with a product line capability—an or-
ganization can score a coup, which is pre-
cisely what Cummins did.2

The key to this enterprise-level strate-
gic positioning is understanding the
scope of the product line. A product
line’s scope states what systems an or-
ganization would be willing to build as
part of its product line and what systems
it would not. In other words, it defines
what’s in and what’s out. Defining a
product line’s scope is like drawing a
doughnut in the space of all possible sys-
tems. The doughnut’s center represents
the set of systems that the organization

point

One of the 
most exciting 

aspects of
software

product lines is
how they put
technical and

enterprise
issues on the
same page.

Continued on page 30



counterpointcontinued from page 29
engineering and software product line
engineering. They let organizations
reuse their existing software, tools, peo-
ple, organization charts, and processes.

The variety of adoption models lets
organizations select one or more
strategies that best meet their business
objectives, engineering realities, and
management styles. The three promi-
nent adoption models are proactive,
reactive, and extractive.

The proactive approach to soft-
ware product lines is like the waterfall
approach to conventional software.
You analyze, architect, design, and
implement all product variations on
the foreseeable horizon up front. This

approach might suit organizations
that can predict their product line re-
quirements well into the future and
that have the time and resources for a
long waterfall development cycle.

The reactive approach is like the
spiral or extreme programming ap-
proach to conventional software. You
analyze, architect, design, and imple-
ment one or several product varia-
tions on each development spiral. This
approach works in situations where
you cannot predict the requirements
for product variations well in advance
or where organizations must maintain
aggressive production schedules with
few additional resources during the

transition to a product line approach.
The extractive approach reuses one

or more existing software products
for the product line’s initial baseline.
To be an effective choice, the extrac-
tive approach requires lightweight
software product line technology and
techniques that can reuse existing
software without much reengineering.
This approach is very effective for an
organization that wants to quickly
transition from conventional to soft-
ware product line engineering.

The combination of lightweight
technologies and techniques along with
the variety of adoption models offers a
dramatic reduction in the adoption

point continued from page 28

3 0 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

could build, and would be willing to
build, under the auspices of its prod-
uct line capability. Systems outside
the doughnut represent those that are
out of scope, that the product line is
not equipped to handle well. Systems
on the doughnut itself could be han-
dled with some effort, but require
case-by-case disposition as they arise.
In a product line of office automation
systems, a product with a conference
room scheduler would be in, but one
with a flight simulator would be out.
One with a specialized intranet search
engine might be in if it could be pro-
duced in a reasonable time and if
there were strategic reasons for doing
so (such as the likelihood that future
customers would want a similar
product). 

Explicitly scoping the product line
lets us examine regions in the neigh-
borhood that are underrepresented by
actual products in the marketplace,
make small extensions to the product

line, and move quickly to fill the gap.
In short, a consciously preplanned,
proactive product line scope helps or-
ganizations take charge of their own
fate. The scope feeds other product
line artifacts; the requirements, archi-
tecture, and components all take their
cues for the variabilities they need to
provide from the scope statement. 

P utting an organization on thesame strategic page requires vi-sion, strong management,
technical competence, process disci-
pline, and no small amount of dedi-
cated leadership. But the payoffs can
be spectacular, as companies large and
small in all domains are discovering.
Help is available. The Software Engi-
neering Institute’s product line practice
framework (www.sei.cmu.edu/plp) de-
scribes how to extend software engi-
neering and managerial practices from
one-system-at-a-time product building

to make them apply to product line
engineering. The growing body of lit-
erature and case studies also provides
invaluable guidance for practitioners
who want to adopt the approach. To-
gether, we are taking product lines into
the realm where organizations can be
proactive about the systems they are
prepared to build.

References
1. L. Brownsword and P. Clements, A Case

Study in Successful Product Line Develop-
ment, tech. report SEI/CMU 96-TR-016,
Carnegie Mellon Univ., Software Eng. Inst.,
Pittsburgh, 1996.

2. P. Clements and L. Northrop, Software Prod-
uct Lines: Practices and Patterns, Addison-
Wesley Longman, Reading, Mass., 2001. 

Paul Clements is a senior member of the technical staff
at the Software Engineering Institute, Carnegie Mellon Univer-
sity. His technical interests include product line systems, software
architecture, software design, and product line practice. He re-
ceived his PhD in computer sciences from the University of Texas
at Austin. Contact him at SEI, 4500 Fifth Ave., Pittsburgh, PA
15213; clements@sei.cmu.edu.



Eliminating the
Adoption Barrier 
Charles Krueger

S
tories of successful software
product line deployments of-
ten read like epic adventures.
In the end, there is triumph of
inspirational proportions, but
along the journey there is risk,

hardship, sacrifice, heroes, antagonists,
love lost, love found, and fortuitous events
of both happy and tragic consequences.
For example, for Cummins to achieve its
impressive software product line successes,
it stopped all product deployments for six
months while it rearchitected its engine con-
trol software, support technology, organiza-
tional charts, and processes. Imagine the
consequences if, after an extended produc-
tion shutdown, unanticipated events had
led to project failure.

Although these epics make for great,
inspiring reading, many software organi-
zations need to operate on a more pre-
dictable and less dramatic story line.
They can’t afford to slow or stop pro-
duction for six months to reinvent them-
selves, even if the potential payoff is
huge. For most organizations, the risks,
timetables, efforts, and costs experienced
by the pioneers represent an adoption
barrier to software product line practice.

For software product lines to become
part of mainstream software engineering
culture, organizations need software
product line strategies with low adop-
tion barriers. They need low-risk strate-
gies that afford small upfront effort, in-
cremental transition from current
practices, and rapid return on invest-
ment. Several organizations have recog-
nized this need and are successfully cre-
ating technology and techniques that
lower the adoption barrier to software
product lines (see www.biglever.com,
www.esi.es/Projects/Reuse/projects.htm,
and www.iese.fhg.de/Business_Areas/
Product_Line_Development).

These new approaches offer two things
not found in the epic proactive software
product line approaches. The first is light-
weight technologies and techniques that
specifically support software product line
engineering. The second is a variety of
adoption models for establishing and op-
erating a software product line practice.

Lightweight software product line tech-
nologies and techniques minimize the par-
adigm shift between conventional software

Although these
epics make for
great, inspiring
reading, many

software
organizations

need to operate
on a more

predictable and
less dramatic

story line. 

0 7 4 0 - 7 4 5 9 / 0 2 / $ 1 7 . 0 0  ©  2 0 0 2  I E E E J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 2 9

counterpoint

Continued on page 30



counterpointcontinued from page 29
engineering and software product line
engineering. They let organizations
reuse their existing software, tools, peo-
ple, organization charts, and processes.

The variety of adoption models lets
organizations select one or more
strategies that best meet their business
objectives, engineering realities, and
management styles. The three promi-
nent adoption models are proactive,
reactive, and extractive.

The proactive approach to soft-
ware product lines is like the waterfall
approach to conventional software.
You analyze, architect, design, and
implement all product variations on
the foreseeable horizon up front. This

approach might suit organizations
that can predict their product line re-
quirements well into the future and
that have the time and resources for a
long waterfall development cycle.

The reactive approach is like the
spiral or extreme programming ap-
proach to conventional software. You
analyze, architect, design, and imple-
ment one or several product varia-
tions on each development spiral. This
approach works in situations where
you cannot predict the requirements
for product variations well in advance
or where organizations must maintain
aggressive production schedules with
few additional resources during the

transition to a product line approach.
The extractive approach reuses one

or more existing software products
for the product line’s initial baseline.
To be an effective choice, the extrac-
tive approach requires lightweight
software product line technology and
techniques that can reuse existing
software without much reengineering.
This approach is very effective for an
organization that wants to quickly
transition from conventional to soft-
ware product line engineering.

The combination of lightweight
technologies and techniques along with
the variety of adoption models offers a
dramatic reduction in the adoption

point continued from page 28

3 0 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

could build, and would be willing to
build, under the auspices of its prod-
uct line capability. Systems outside
the doughnut represent those that are
out of scope, that the product line is
not equipped to handle well. Systems
on the doughnut itself could be han-
dled with some effort, but require
case-by-case disposition as they arise.
In a product line of office automation
systems, a product with a conference
room scheduler would be in, but one
with a flight simulator would be out.
One with a specialized intranet search
engine might be in if it could be pro-
duced in a reasonable time and if
there were strategic reasons for doing
so (such as the likelihood that future
customers would want a similar
product). 

Explicitly scoping the product line
lets us examine regions in the neigh-
borhood that are underrepresented by
actual products in the marketplace,
make small extensions to the product

line, and move quickly to fill the gap.
In short, a consciously preplanned,
proactive product line scope helps or-
ganizations take charge of their own
fate. The scope feeds other product
line artifacts; the requirements, archi-
tecture, and components all take their
cues for the variabilities they need to
provide from the scope statement. 

P utting an organization on thesame strategic page requires vi-sion, strong management,
technical competence, process disci-
pline, and no small amount of dedi-
cated leadership. But the payoffs can
be spectacular, as companies large and
small in all domains are discovering.
Help is available. The Software Engi-
neering Institute’s product line practice
framework (www.sei.cmu.edu/plp) de-
scribes how to extend software engi-
neering and managerial practices from
one-system-at-a-time product building

to make them apply to product line
engineering. The growing body of lit-
erature and case studies also provides
invaluable guidance for practitioners
who want to adopt the approach. To-
gether, we are taking product lines into
the realm where organizations can be
proactive about the systems they are
prepared to build.

References
1. L. Brownsword and P. Clements, A Case

Study in Successful Product Line Develop-
ment, tech. report SEI/CMU 96-TR-016,
Carnegie Mellon Univ., Software Eng. Inst.,
Pittsburgh, 1996.

2. P. Clements and L. Northrop, Software Prod-
uct Lines: Practices and Patterns, Addison-
Wesley Longman, Reading, Mass., 2001. 

Paul Clements is a senior member of the technical staff
at the Software Engineering Institute, Carnegie Mellon Univer-
sity. His technical interests include product line systems, software
architecture, software design, and product line practice. He re-
ceived his PhD in computer sciences from the University of Texas
at Austin. Contact him at SEI, 4500 Fifth Ave., Pittsburgh, PA
15213; clements@sei.cmu.edu.



J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 3 1

One of the insightful segments in the Clements and North-
rop book on software product lines is a sidebar entitled E
Pluribus Unum (Latin for “out of many, one”). There, Cle-
ments skillfully articulates how organizations who have mas-
tered software product line engineering think of themselves
as building a singular software “system”—the product
line—rather than as building multiple software products.
What this suggests to me is that all the issues that the soft-
ware industry has explored for engineering singular one-of-
a-kind software systems will be explored again for engi-
neering singular software product lines.

The argument for or against proactive approaches to soft-
ware product line engineering resembles the arguments for or
against waterfall approaches to one-of-a-kind software engi-
neering. Rather than be dogmatic about any particular ap-
proach, I prefer to keep a collection of approaches available
in my toolbox. After exploring business conditions, knowl-
edge of the domain, clarity and stability of the customer re-
quirements,  architectural complexity, likelihood of building
the “wrong” system, available time and resources, and so
forth, I can go to the toolbox to select the tool that best solves
the problem.

The issue here, I believe, is whether proactive should
be the only tool in my toolbox rather than whether it’s a
good approach. For Cummins, proactive was likely the
most effective approach. For Salion, a combination of ex-
tractive and reactive approaches fit their business condi-
tions perfectly.

For the mainstream software engineering community to
embrace software product lines, the adoption barrier must be
much lower than that experienced by the early pioneers. Pro-
viding lightweight technology and techniques plus a variety of
adoption models will go a long way toward enabling the en-
tire software industry to capitalize on the order-of-magnitude
improvements offered by software product lines.

Charles Responds

barrier. For example, Salion, an enterprise software pro-
ducer, needed to transition from conventional one-of-a-kind
software engineering to software product line engineering.1

Based on time and cost constraints, an epic proactive transi-
tion was out of the question. So, it adopted lightweight soft-
ware product line technology from BigLever Software,2 an
extractive approach to reuse existing conventional product
as the baseline for the product line and a reactive approach
to implement unanticipated requirements from new cus-
tomers. While maintaining its aggressive production sched-
ule, Salion transitioned to a live software product line in
about four person-months of total effort, which was less
than 5 percent of the time required to build the conventional
product used as the product line’s baseline.

I t has been said that “the right point of view is worth 20points of IQ.” That is certainly the approach we needto take in moving software product line practice from

the realm of epic adventures to mainstream software prac-
tice. New advances in technology and methodology show
that, by taking the right viewpoint, the adoption barrier
disappears.

References
1. P. Clements and L. Northrop, Salion, Inc.: A Case Study in Successful

Product Line Practice, tech. report, Carnegie Mellon Univ., Software Eng.
Inst. to appear in 2002.

2. C. Krueger, “Easing the Transition to Software Mass Customization,”
Proc. 4th Int’l Workshop Software Product Family Eng., Springer Verlag,
New York, 2001, pp. 282–293.

Charles Krueger is the founder and CEO of BigLever Software. His technical interests are in
technologies and techniques that bring software product lines into mainstream software engineering
practice. He received his PhD in computer science from Carnegie Mellon University. Contact him at
BigLever Software, 10500 Laurel Hill Cove, Austin, TX 78730; ckrueger@biglever.com.

Krueger’s identification of adoption models—proactive, reac-
tive, extractive—is a first-rate contribution to this field, as is his
missionary work for low-cost adoption methods. But with the zeal
of some missionaries, I think he’s a little quick to spot the devil
lurking about—in this case, hiding in the proactive approach.

First, the proactive approach does not require a halt in pro-
duction. At Cummins, the new product line manager called a
halt because the projects that were under way were running in
different directions and would clearly not be able to deliver the
many products to which the company had already committed.
Turning the whole organization to the product line approach was
its salvation, because it was on the road to major failure any-
way. Here, the risk was in not taking decisive action.

Second, proactive adoption does not mean unanimous si-
multaneous adoption. In our book Software Product Lines: Prac-
tices and Patterns (Addison-Wesley, 2001), Linda Northrop and
I write extensively about how an organization can launch pilot
projects to introduce the concepts, demonstrate measurable
benefit, iron out process and organizational details, and let
other projects climb aboard when ready.

Finally, we read that in the proactive world “all product varia-
tions on the foreseeable horizon are analyzed, architected, de-
signed, and implemented up front.” Well, when would you not
take the foreseeable horizon into account? Granted, in some en-
vironments, your foreseeable horizon might not be very broad.
But shouldn’t you still plan for the variations you know are com-
ing? If you don’t, your architecture (among other things) might
simply not be up to the task. If your next customer wants a version
of your basic product that runs 10 times as fast and supports 100
times the users, good luck achieving that by just iterating on your
current inventory. 

Being proactive simply means actively gathering what you
know about your customers and your application area and us-
ing that knowledge as much as you can to plan for the future
and, in some cases, to manage that future to your advantage. 

Paul Responds



3 2 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2 0 7 4 0 - 7 4 5 9 / 0 2 / $ 1 7 . 0 0  ©  2 0 0 2  I E E E

McDonald’s develop product lines. But soft-
ware product lines are a relatively new con-
cept. They are rapidly emerging as a practi-
cal and important software development
paradigm. A product line succeeds because
companies can exploit their software prod-
ucts’ commonalities to achieve economies of
production. 

The Software Engineering Institute’s
(SEI) work has confirmed the benefits of
pursuing this approach; it also found that
doing so is both a technical and business de-
cision. To succeed with software product
lines, an organization must alter its techni-
cal practices, management practices, organi-
zational structure and personnel, and busi-
ness approach. 

Software product lines 
A software product line is a set of soft-

ware-intensive systems that share a com-

mon, managed feature set satisfying a par-
ticular market segment’s specific needs or
mission and that are developed from a com-
mon set of core assets in a prescribed way. 

Core assets form the basis for the software
product line. Core assets often include, but
are not limited to, the architecture, reusable
software components, domain models, re-
quirements statements, documentation and
specifications, performance models, sched-
ules, budgets, test plans, test cases, work
plans, and process descriptions. The architec-
ture is key among the collection of core assets.

Each system in the product line is a prod-
uct in its own right. However, it is created
by taking applicable components from a
common asset base, tailoring them through
preplanned variation mechanisms, adding
new components as necessary, and assem-
bling the collection according to the rules of
a common, product-line-wide architecture.

focus
SEI’s Software Product
Line Tenets

Linda M. Northrop, Software Engineering Institute

Software product
lines are rapidly
emerging as a viable
and important
software
development
paradigm. The
Software
Engineering Institute
defines basic
concepts and the
activities and
practices that
ensure success. 
The author shares
how-to’s, success
stories, and lessons
learned while
defining and
applying this
approach.

C
ompanies, such as Hewlett-Packard, Nokia, and Motorola, are
finding that using a product line approach for software can yield
remarkable quantitative improvements in productivity, time to
market, product quality, and customer satisfaction. This practice

of building sets of related systems from common assets can also efficiently
satisfy the current demand for mass customization of software. Product
lines are, of course, not new in manufacturing. Boeing, Ford, Dell, and even 

initiating software product lines



Every software product line has a prede-
fined guide or plan that specifies the exact
product-building approach. 

Development is a generic term used to de-
scribe how core assets (and products) come
to fruition. Software enters an organization
in one of three ways: the organization builds
it (from scratch or by mining legacy soft-
ware), purchases it (largely unchanged, off
the shelf), or commissions it (contracts with
someone else to develop it especially for
them). So, the term development might actu-
ally involve building, acquiring, purchasing,
retrofitting earlier work, or any combination
of these options. 

Some practitioners use a different set of
terms to convey essentially the same mean-
ing. They might refer to a product line as a
product family,1 to the core asset set as a
platform,2 or to the products of the software
product line as customizations instead of
products. Others use the terms domain and
product line interchangeably. We distinguish
between the two. A domain is a specialized
body of knowledge, an area of expertise, or
a collection of related functionality. Core as-
set development is often referred to as do-
main engineering, and product development
as application engineering. 

Regardless of terminology, software prod-
uct line practice involves strategic, large-
grained reuse, which means that software
product lines are as much about business prac-
tices as they are about technical practices. Us-
ing a common set of assets to build products
requires planning, investment, and strategic
thinking that looks beyond a single product. 

Reuse, as a software strategy for decreas-
ing development costs and improving quality,
is not a new idea. However, past reuse agen-
das, which focused on reusing relatively small
pieces of code or opportunistically cloning
code designed for one system for use in an-
other, have not been profitable. In a software
product line approach, reuse is planned, en-
abled, and enforced. The reusable asset base
includes artifacts in software development
that are costly to develop from scratch.

Essential activities
Numerous organizations in various indus-

tries have reaped significant benefits using a
software product line approach for their sys-
tems. Despite this diversity, we at the SEI be-
lieve we have distilled universal and essential

software product line activities and practices.
At the highest level of generality are three es-
sential and highly iterative activities that
blend technology and business practices.
Fielding a product line involves core asset de-
velopment and product development using
the core assets under the aegis of technical
and organizational management. Figure 1 il-
lustrates this triad of essential activities.

The rotating arrows in Figure 1 indicate
not only that companies use core assets to de-
velop products but also that revisions of ex-
isting core assets or even new core assets
might (and most often do) evolve out of
product development. In some contexts, or-
ganizations mine existing products for
generic assets—perhaps a requirements spec-
ification, an architecture, or software compo-
nents—that they then migrate into the prod-
uct line’s asset base. In other cases, the core
assets might be developed or procured for
later use in product production. There is a
strong feedback loop between the core assets
and the products. Core assets are refreshed as
organizations develop new products. They
then track asset use, and the results are fed
back to the asset development activity. Tech-
nical and organizational managers manage
this process carefully at all levels. 

Core asset development
The core asset development activity’s

goal is to establish a production capability

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 3 3

Product line development

Core asset
development

Product
development

Management

Figure 1. Essential
product line 
activities.



for products. Figure 2 illustrates this activ-
ity, its outputs, and necessary inputs. This
activity, like its counterparts, is iterative. Its
inputs and outputs affect each other. For ex-
ample, slightly expanding the product line
scope (an output) might admit new classes
of systems to examine as possible sources of
legacy assets (an input).

Inputs to core asset development include

� Product constraints: Commonalities
and variations among the products that
will constitute the product line, includ-
ing their behavioral features.

� Styles, patterns, and frameworks: Rele-
vant architectural building blocks that
architects can apply during architecture
definition toward meeting the product
and production constraints.

� Production constraints: Commercial,
military, or company-specific standards
and requirements that apply to the
products in the product line.

� Production strategy: The overall ap-
proach for realizing the core assets. This
can be top down (starting with a set of
core assets and spinning products off of
them), bottom up (starting with a set of
products and generalizing their compo-
nents to produce the product line as-
sets), or some of both.

� Inventory of preexisting assets: Soft-
ware and organizational assets available
at the outset of the product line effort
that can be included in the asset base.

Besides core assets, the outputs of core asset
development include a product line scope,
which describes the products that will con-
stitute the product line or that the product
line is capable of including, and a produc-
tion plan, which describes how products are
produced from the core assets. All three out-
puts must be present to ensure the produc-
tion capability of a software product line.

Product development 
In addition to the three outputs, product

development activity depends on the re-
quirements for individual products. Figure 3
illustrates these relationships; the rotating
arrows indicate iteration. For example, the
existence and availability of a particular
product might affect a subsequent product’s
requirements. Creating products can have a
strong feedback effect on the product line
scope, core assets, production plan, and
even the requirements for specific products.
Product development can vary greatly de-
pending on the assets, production plan, and
organizational context.

Management
Management at the technical (or project)

and organizational (or enterprise) levels must
be strongly committed to the software prod-
uct line effort for the product line’s success.
Technical management oversees the core as-
set development and the product develop-

3 4 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

Core assessment development

Core asset
development

Management

Product constraints 
Styles, patterns,

frameworks
Production constraints

Production strategy
Inventory of

pre-existing assets

Production line scope
         Core assets
       Production plan

Figure 2. Core asset
development.

Product development

Product
development

Management

Requirements
Product line scope
Core assets

Production plan
+ +

Products

Figure 3. Product 
development.



ment activities, ensuring that the groups
building core assets and those building prod-
ucts engage in the required activities, follow
the processes defined for the product line,
and collect data sufficient to track progress. 

Organizational management must set in
place the proper organizational structure
that makes sense for the enterprise and en-
sure that organizational units receive the
right resources (for example, well-trained
personnel) in sufficient amounts. Organiza-
tional management determines a funding
model that ensures core asset evolution and
then provides the funds accordingly. It also
orchestrates the technical activities in and it-
erations between core asset development
and product development. 

Management should ensure that these op-
erations and the product line effort’s com-
munication paths are documented in an op-
erational concept. Management mitigates
risks at the organizational level that threaten
a product line’s success. Product lines tend to
engender different relationships with an or-
ganization’s customers and suppliers, and
these new relationships must be introduced,
nurtured, and strengthened. Management
must create an adoption plan that describes
the organization’s desired state (that is, rou-
tinely producing products in the product
lines) and a strategy for achieving that state. 

Finally, someone should be designated as
the product line manager and either act as
or find and empower a product line cham-
pion. This champion must be a strong, vi-
sionary leader who can keep the organiza-
tion squarely pointed toward the product
line goals, especially when the going gets
rough in the early stages. 

Software product line practice
areas

Beneath the surface of the three essential
activities are 29 practice areas that our ex-
perience shows must be mastered for a suc-
cessful product line. A practice area is a
body of work or a collection of activities.
They help make the three essential activities
more achievable by defining activities that
are smaller and more tractable than a broad
imperative such as “Develop core assets.”
Most practice areas describe activities that
are essential for any successful software de-
velopment, not just software product lines.
However, in a product line context, each

takes on particular significance or must be
carried out in a unique way. For example,
configuration management, an identified
practice area, is important for any software
development effort. However, configuration
management for product lines is more com-
plex than for single systems, those devel-
oped one at a time versus using a product
line approach. The core assets constitute a
configuration that needs to be managed;
each product in the product line constitutes
a configuration that must be managed, and
managing all of these configurations must
be coordinated under a single process.

We have created a conceptual framework
for software product line practice that pro-
vides a comprehensive description of each
practice area as it relates specifically to soft-
ware product line operations and the common
risks associated with each.3,4 We categorize
each practice area as software engineering,
technical management, or organizational
management, according to the skills required
to carry it out. 

Software engineering practice areas
Software engineering practice areas are

those that are necessary for applying the ap-
propriate technology to create and evolve
core assets and products. They are

� Architecture Definition
� Architecture Evaluation
� Component Development
� COTS Utilization
� Mining Existing Assets
� Requirements Engineering
� Software System Integration
� Testing
� Understanding Relevant Domains

Figure 4 provides a sketch of how they re-
late to each other. 

Domain understanding feeds require-
ments, which drive an architecture, which
specifies components. Components can be
made in-house, bought on the open market,
mined from legacy assets, or commissioned
under contract. This choice depends on the
availability of in-house talent and resources,
open-market components, an exploitable
legacy base, and able contractors. Their ex-
istence (or nonexistence) can affect the
product line’s requirements and architec-
ture. Once available, the components must

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 3 5

Software
engineering

practice areas
are those that
are necessary
for applying the

appropriate
technology to

create and
evolve core
assets and
products.



be integrated and, along with the system, be
tested. This description is a quick trip
through an iterative growth cycle. It greatly
oversimplifies reality but shows a good ap-
proximation of how software engineering
practice areas come into play. 

Technical management practice areas
Technical management practices are

those that are necessary for engineering the
creation and evolution of core assets and
products. Technical management’s practice
areas are

� Configuration Management
� Data Collection, Metrics, and Tracking
� Make/Buy/Mine/Commission Analysis 
� Process Definition
� Scoping
� Technical Planning 
� Technical Risk Management
� Tool Support

These practices directly support and pave
the way for software development activities.
Scoping and Technical Planning delineate
what should be built and how. Data Collec-
tion, Metrics, and Tracking and Technical
Risk Management establish “health” meas-
ures for the software development efforts

and help assess their current conditions.
Make/Buy/Mine/Commission Analysis, Tool
Support, Configuration Management, and
Process Definition all contribute to a smooth
development effort.

Organizational management practice areas
Organizational management practices

are those that are necessary for orchestrat-
ing the entire product line effort. Practice
areas in organizational management are

� Building a Business Case
� Customer Interface Management
� Developing an Acquisition Strategy
� Funding
� Launching and Institutionalizing
� Market Analysis
� Operations
� Organizational Planning
� Organizational Risk Management
� Structuring the Organization
� Technology Forecasting
� Training

Some practices, such as Building a Busi-
ness Case and Funding, are required to ini-
tiate a product line approach and emphasize
the business investment and planning re-
quired. Others, such as Operations and Or-

3 6 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

Understanding Relevant Domains

Architecture Definition
Architecture Evaluation

specifies components
Make/Buy/Mine/Commission analysis

feeds

drives

Domain understanding

Requirements

Architecture

Components

Make Buy Mine Commission

Component
Development

COTS
Utilization

Market availability Legacy base

Software System Integration Testing

Mining
Existing Assets

(Developing an
acquisition strategy)

Existing
talent

Organizational
policy

Figure 4. 
Relationship among
software engineering
practice areas.



ganizational Risk Management, apply to
ongoing product line efforts. Launching and
Institutionalizing is about an organization’s
systematic growth from a given state to a
higher state of product line sophistication. It
is actually a context-sensitive threading of
other organizational management practice
areas. The sheer number of organizational
management practice areas gives testament
to the significant business dimension of soft-
ware product lines. 

Product line practice patterns
Although laying out all essential activi-

ties and practice areas has proven very help-
ful, an organization must still determine
how to put the practice areas into play. One
approach is to follow a divide-and-conquer
strategy. Fortunately, although no two situ-
ations are alike, we have found that similar
situations repeatedly occur. It is because of
these similarities that product line practice
patterns have emerged.3 Patterns are a way
of expressing common contexts and prob-
lem and solution pairs. They have been used
effectively in many disciplines including ar-
chitecture, economics, social science, and
software design. For software product line
practice patterns, the context is the organi-
zational situation. The problem is part of
the software product line effort that must be
accomplished. The solution is the grouping
of practice areas and their relations to ad-
dress the problem for that context. 

Following the lead of the design patterns
community, we created a pattern template
and have used it to define the 22 patterns
(including variants) listed in Table 1. 

These patterns, some of which have rela-
tionships between them, span various
ranges of abstraction, scale, and purpose.
For example, Factory is a composite pattern
that consists of eight other patterns, so it de-
scribes the entire product line organization. 

Lessons learned defining the
approach 

The SEI’s understanding of what is in-
volved in a software product line approach
has evolved considerably. Our ideas have ma-
tured, and no doubt will continue to mature,
owing to our direct involvement in software
product line efforts, our discussions with oth-
ers involved in product line work, and our
own (sometimes heated) internal debates.

Formulating the basic concepts

Our original thoughts were based on a do-
main engineering, followed by an application
engineering mind-set, which had an unrealistic
waterfall life-cycle mentality. We rarely en-
countered an organization that had the luxury
of developing assets from scratch and then
building products from those assets. In almost
all situations, some products or assets already
existed, and the asset base grew out of those.
In any case, each asset continues to evolve
over time. Core asset development and prod-
uct development activities are highly iterative,
and that iteration must be carefully managed.
This latter insight led us to include manage-
ment as the third essential activity.

In our original definition of software
product lines, we did not prescribe how
products were constructed. After much de-
bate, we concluded that our definition was
insufficiently discriminating. We added the
clause “that are developed from a common
set of core assets in a prescribed way.” Ex-
panding the definition proved to be an
epiphany that led to other refinements. We
agree with others5 that the product line ar-
chitecture plays a special role among the core
assets by providing the structural prescrip-
tion for products in the product lines. How-
ever, we discovered that the product line ar-
chitecture alone does not provide enough

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 3 7

Table 1
Product line practice patterns

Pattern Variants

Assembly Line
Cold Start Warm Start
Curriculum
Each Asset Each Asset Apprentice 

Evolve Each Asset
Essentials Coverage
Factory
In Motion
Monitor
Process Process Improvement
Product Builder Product Generation
Product Parts Green Field 

Barren Field 
Plowed Field

What to Build Analysis
Forced March



prescription. Each core asset should have an
associated attached process that specifies
how to use it in product development. These
attached processes get folded into what be-
comes the product production plan. 

Another debate in the product line com-
munity was whether releases and versions of
single products constituted a product line. Al-
though others still disagree, we decided that
they did not. We agree with Jan Bosch that a
product line evolves over time and space.5

Settling on the practice area set 
Being true to our technical backgrounds,

we began with a greater proportion of prac-

tice areas in software engineering than in
management. However, we quickly recog-
nized the need for more management prac-
tices, and the set of technical and organiza-
tional management practices grew. 

For some time, we maintained that Do-
main Analysis was a practice area, meaning
that a formal domain analysis was required.
However, CelsiusTech and other organiza-
tions with successful product lines did not
conduct a domain analysis. However, they did
have solid knowledge of their domains, which
helped them make good product decisions.
What was essential was understanding rele-
vant domains, so that became a practice area. 

3 8 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

There is a great benefit in learning how others approached
their move to product lines. We have documented four com-
plete product line case studies.1 

Our earliest report was a study of CelsiusTech Systems, a
Swedish defense contractor supplying international navies with
shipboard command and control systems.2 Using a product line
approach, they have delivered more than 50 systems from es-
sentially the same asset base. In doing so, they have shortened
delivery schedules by years, allowed a smaller staff to produce
more systems, and achieved software reuse levels into the 90
percent range.

Cummins, the world’s largest manufacturer of commercial
diesel engines with more than 50 horsepower, made a bold
move to a software product line approach for its engine control
software. The results are most compelling. It previously took Cum-
mins a year or more to bring new engine software to the test lab,
but now it takes less than a week. Moreover, the product line ap-
proach lets the company augment its command of the automotive
diesel engine market. It has expanded vigorously into the indus-
trial diesel market, where just 20 software builds provide the ba-
sis for more than a thousand separate engine products; it now
offers a mix of feature and platform flexibility that otherwise
would require almost four times their current staff. 

The US National Reconnaissance Office took advantage of
commonality and built a product line asset base for its ground-
based spacecraft command and control software. They commis-
sioned Raytheon to build their asset base, the Control Channel
Toolkit. The new product line’s first system has seen, among other
benefits, a 50-percent decrease in overall cost and schedule, and
nearly tenfold reduction in development personnel and defects.

Successful product lines are also possible in small organiza-
tions, such as in Market Maker Software of Kaiserslautern, Ger-
many, producer of Europe’s most popular stock market soft-
ware. Market Maker adopted a product line approach to

produce an Internet version of its software. This version, which
they market to other companies, must integrate with other data-
bases and content-producing software (which run on a variety
of computing platforms and servers); satisfy human-user per-
formance requirements; and be tailored to show the exact kind
of data, in exactly the kind of charts, in exactly the kind of form
each customer’s Web site requires. Using their software product
line, it takes Market Maker as few as three days to install a tai-
lored system for individual customers.

Others have also reported success stories: Alcatel,3 Hewlett
Packard,4 Philips,5 the Boeing Company,6 and Robert Bosch
GmBh7 presented their experiences at the 2000 Software Prod-
uct Line Conference (SPLC1 00).

References
1. P. Clements and L. Northrop, Software Product Lines: Practices and Patterns,

Addison-Wesley, Boston, 2001.
2. L. Brownsword and P. Clements, A Case Study in Successful Product Line

Development, tech. report CMU/SEI-96-TR-016, Software Eng. Inst.,
Carnegie Mellon Univ., Pittsburgh, 1996; www.sei.cmu.edu/publications/
documents/96.reports/96.tr.016.html.

3. M. Coriat et al., “The SPLIT Method,” Proc. 1st Software Product Line Conf.
(SPLC1 00), Kluwer Academic Publishers, Boston, 2000, pp. 147–166.

4. P. Toft et al., “A Cooperative Model for Cross-Divisional Product Develop-
ment for a Software Product Line,” Proc. 1st Software Product Line Conf.
(SPLC1 00), Kluwer Academic Publishers, Boston, 2000, pp. 111–132.

5. P. America et al., “CoPAM: A Component-Oriented Platform Architecting
Method Family for Product Family Engineering,” Proc. 1st Software Product
Line Conf. (SPLC1 00), Kluwer Academic Publishers, Boston, 2000, pp.
167–180.

6. D. Sharp, “Component-Based Product Line Development of Avionics Soft-
ware,” Proc. 1st Software Product Line Conf. (SPLC1 00), Kluwer Academic
Publishers, Boston, 2000, pp. 353–369.

7. S. Thiel and F. Peruzzi, “Starting a Product Line Approach for an Envi-
sioned Market,” Proc. 1st Software Product Line Conf. (SPLC1 00), Kluwer
Academic Publishers, Boston, 2000, pp. 495–512.

Product Line Success Stories



Also, early on we considered understand-
ing relevant domains, requirements engineer-
ing, and scoping as one practice area. How-
ever, we gradually found that although there
were dependencies among the three, they in-
volved different activities and players. 

Determining the practice areas’ contents
Experts draft individual practice area de-

scriptions for the framework, so overlap
continues to require monitoring. In reality,
there are no clear boundaries between the
practice areas; we could slice the effort in
many different ways, but a balance, how-
ever arbitrary in some cases, is important to
assert.

Some of our early ideas about software
product lines were simply naïve. For exam-
ple, we originally believed that the organi-
zational structure must have two units: one
to build the core assets and one to build
products. Colleagues from Nokia and
Hewlett-Packard, among others, pointed
out that all product line development can
be concentrated in a single unit, where each
member is expected to be a jack-of-all-
trades in the product line, doing domain
engineering tasks or application engineer-
ing tasks when appropriate. Later, Bosch
described four separate organizational
models.5

Beyond practice areas
The practice area framework was (and is)

an encyclopedia of software product lines,4

but we fell short in offering concrete guid-
ance on using that encyclopedia. There were
many fits and starts about how and what to
provide. We settled on product line practice
patterns and have been encouraged by early
positive feedback. 

We have also been encouraged to connect
the product line practice framework with
software development standards, most espe-
cially with the Capability Maturity Model
framework. We have compared the frame-
work with the Capability Maturity Model
Integration for Systems Engineering/Soft-
ware Engineering V1.1.4. Although process
discipline is essential for product line suc-
cess, there is not one-to-one mapping be-
tween these standards. The process areas in
the CMMI framework do not address 12
product line practice areas, and even for
those that do cover similar subjects, the em-

phasis is different. More fundamentally, the
product line practice framework is not a
maturity model. 

Lessons learned applying the
approach

Besides the explicit changes in our ap-
proach, we learned these lessons:

� Product line business practices cannot
be affected without explicit manage-
ment commitment and involvement. We
have seen too many product line efforts
fail for lack of sponsorship and commit-
ment from someone above the technical
ranks. 

� Organization size doesn’t matter. Our
original experiences were all with large
organizations. Many small organiza-
tions, such as Market Maker (see the
“Product Line Success Stories” sidebar),
have demonstrated that they can suc-
ceed with product lines.

� Reuse has a bad reputation in many or-
ganizations owing to the failure of ear-
lier small-grained reuse initiatives. It
takes highly proactive advocacy and
marketing to introduce software prod-
uct lines into such cultures.

� Organizations often want an evaluation
of their product line efforts. (This led us
to develop the Product Line Technical
Probe, a diagnostic method for examin-
ing an organization’s readiness to adopt,
or ability to succeed with, a software
product line approach, described else-
where.)3

� The lack of either an architecture focus
or architecture talent can kill an other-
wise promising product line effort. 

� Process discipline is critical. Processes
can be according to the CMM frame-
work, Extreme Programming, or some
Agile method, but they must be defined
and followed. On one of our collabora-
tions, we mistakenly introduced process
improvement and software product
lines simultaneously. The product line
effort languished.  

� The community needs more quantita-
tive data to support software product
line adoption. Moving to product lines
is an investment, and decision makers
want hard numbers in their business
cases.

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 3 9

Organizations
can benefit

tremendously
through product

lines.



S oftware product lines epitomize the concept ofstrategic, planned reuse, and differ from theopportunistic reuse of the past that has been
largely discredited. Organizations can benefit tremen-
dously through product lines. A number of global soft-
ware trends make product lines more doable today
than in the past, such as rapidly maturing and increas-
ingly sophisticated software development technolo-
gies, mature object technology, vendor-available com-
ponents with tremendous functional capability,
increased realization of the importance of architecture,
universal recognition of the need for process disci-
pline, product line case studies, workshops, and edu-
cation programs. Nevertheless, there are needs in
many areas. For example, better product line tool sup-
port and more supportive business models and data
are imperative. However, the industry trend toward
software product lines seems indisputable. The SEI be-
lieves that software product lines are here to stay.

Acknowledgments
Many people have contributed to the SEI’s product line work,

both inside and outside the SEI. Although Paul Clements and I
have led the charge, the entire SEI Product Line Practice Initiative
team has contributed to the basic concept evolution, to the focus-
ing of the key ideas, and to the work’s conceptual integrity. Much
of the information that the SEI has assimilated has come from soft-
ware community members who have built software product lines,
sometimes with our help. They have graciously participated in our
conference and software product line workshops and shared with
us their knowledge and experience. 

References
1. P. America et al., “CoPAM: A Component-Oriented Platform Archi-

tecting Method Family for Product Family Engineering,” Proc. 1st
Software Product Line Conf. (SPLC1 00), Kluwer Academic Publish-
ers, Boston, 2000, pp. 167–180.

2. P. Toft et al., “A Cooperative Model for Cross-Divisional Product De-
velopment for a Software Product Line,” Proc. 1st Software Product
Line Conf. (SPLC1 00), Kluwer Academic Publishers, Boston, 2000,
pp. 111–132.

3. P. Clements and L. Northrop, Software Product Lines: Practices and
Patterns, Addison-Wesley, Boston, 2001.

4. P. Clements and L. Northrop, “A Framework for Software Product
Line Practice,” 2000; www.sei.cmu.edu/plp/framework.html.

5. J. Bosch, Design and Use of Software Architectures: Adopting and
Evolving a Product-Line Approach, Addison-Wesley, Boston, 2000.

Linda M. Northrop’s biography appears on page 27.

For more information on this or any other computing topic, please visit our Digital Library at
http://computer.org/publications/dlib.

4 0 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

How to 
Reach Us

Writers
For detailed information on submitting articles, write for our Edi-
torial Guidelines (software@ computer.org) or access
http://computer.org/
software/author.htm.

Letters to the Editor
Send letters to

Editor, IEEE Software
10662 Los Vaqueros Circle
Los Alamitos, CA 90720
software@computer.org

Please provide an email address or daytime phone number
with your letter.

On the Web
Access http://computer.org/software for information about
IEEE Software.

Subscribe
Visit http://computer.org/subscribe. 

Subscription Change of Address
Send change-of-address requests for magazine subscriptions to
address.change@ieee.org. 
Be sure to specify IEEE Software.

Membership Change of Address
Send change-of-address requests for IEEE and Computer Society 
membership to member.services@ieee.org.

Missing or Damaged Copies
If you are missing an issue or you received a damaged copy,
contact help@computer.org.

Reprints of Articles
For price information or to order reprints, send email to
software@computer.org or fax +1 714 821 4010.

Reprint Permission
To obtain permission to reprint an article, contact William
Hagen, IEEE Copyrights and Trademarks Manager, at
whagen@ieee.org.

How to 
Reach Us



focus

0 7 4 0 - 7 4 5 9 / 0 2 / $ 1 7 . 0 0  ©  2 0 0 2  I E E E J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 4 1

In 1995, the small Esprit project ARES
(Architectural Reasoning for Embedded Sys-
tems)1 began with a focus on architecture
support for developing product families. Near
the end of ARES, another Esprit consortium
started investigating family development
processes in the Praise project. When ARES
finished, both ARES and Praise forces began
to cooperate on a larger scale within the In-
formation Technology for European Ad-
vancement framework (www. itea-office.org).
Established in mid-1999, ITEA is an industry-
driven, multinational strategic research and
development program designed to promote
the development of embedded and distributed
software and related software engineering
technologies. Because ITEA projects last for
at most two years, there has been a sequence
of such efforts. The first, Esaps (Engineering
Software Architectures, Processes, and Plat-
forms for System Families), recently finished,
and the second, Café (Concepts to Applica-
tion in System-Family Engineering), has just
begun. The research in Café will extend the

Esaps results by providing methods and
processes that support independent life cycles
of products and of systems using these prod-
ucts. In short, Café will tie the separate con-
cepts of Esaps into a unified whole covering a
product family’s entire life cycle. A follow-up
project is already being planned.

Companies in the ITEA projects (see Fig-
ure 1) are working on a variety of embedded
systems, including medical imaging, mobile
phones, flight control, utility control, super-
vision and management, financial services,
and car electronics. Because they are still in-
troducing product family practices in their
organizations, not all conclusions are defi-
nite. The five major partners—Philips,
Nokia, Siemens, Thales, and Telvent—intro-
duced product family development in soft-
ware organizations of more than 100 peo-
ple. Several other companies and research
institutions are involved in parts of the pro-
gram: they introduce family development on
smaller scales, focus on special topics, or act
as consultants for other companies.

Software Product 
Families in Europe:
The Esaps & Café Projects

Frank van der Linden, Philips Medical Systems

European companies
have been
cooperating for
seven years on
product family
development. The
size and scale 
of the projects 
have increased
dramatically, and
funding now comes
through the ITEA
framework from
local governments.
Here is an overview
of these projects,
their results, and
how they differ from
other product line
efforts.

T
he main drive for Europe’s industrial-cooperation projects on
product family development is business need. The participating
companies have realized that only through significant reuse could
they increase software productivity, and for reuse to happen, it

had to be planned and organized.

initiating software product lines



Product line, product family,
product population

You might notice that we use the term
product family or system family where oth-
ers use product line. This is because the US
and European communities in this field
worked independently until a first meeting
in Las Navas, Spain, in November 1996. By
that time, two sets of terminology were al-
ready established.

Moreover, certain European companies
use product line to indicate something differ-
ent—a set of related, commercial products
that appear similar to users but often are
built with different technologies. For exam-
ple, product lines in consumer electronics in-
clude televisions, VCRs, DVD players, audio
receivers, CD players, audio amplifiers, and
so on. These products have similar housings
and user interfaces (for instance, buttons, di-
als, and LEDs), but their internal technical
details might differ a lot. We use product
family to describe a collection of products

that are based on the same technology—for
instance, a collection of TVs based on the
same software architecture. Often products
in the same product line are in different prod-
uct families, and vice versa. Because good
communication between the architects and
the marketing department is important in
product family development, using product
family or system family is easier.

Rob van Ommering introduced the tech-
nical term product population.2 This term
denotes a collection of related systems based
on a similar technology but with many dif-
ferences. For instance, the complete set of
consumer electronics products mentioned
earlier can form a product population.

Family development concerns
Setting up product family development

means taking several concerns into account.
The acronym BAPO, introduced by Henk
Obbink of Phillips Research, covers the main
issues. BAPO stands for

4 2 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

Philips, AEC
Software Engineering Research Centre, E
Environmental and Energy Study Inst., E

Univ. of Groningen, EC

The Netherlands

Ericsson, E
Combitech, E

Blekinge Inst. of Tech., E

.

Sweden

Nokia, AEC
Helsinki Univ. of Technology, E

Univ. of Helsinki, C

Finland

Siemens, EC
Bosch, PEC

Market Maker, EC
Fraunhofer Inst. for Experimental Software Eng., EC

Univ. of Essen, EC

GermanyThales, PEC
Alcatel, E

French Nat'l Inst. for Research in
Computer Science and Control, EC

Ivorium, EC
Softeam, C

France

Telvent, EC
Unión Fenosa, E

Polytechnic Univ. of Madrid, AEC
European Software Inst., PEC

Spain

Omega Generation, C
Inst. of Information Research, C

Italy
Vienna Univ. of Technology, AC
Johannes Kepler Univ. of Linz, C

Austria

Imperial College, A

A:  ARES
P:  Praise
E:  Esaps
C:  Café

United Kingdom

Asea Brown Boveri, A
Information on Communication Tech. Norway, C

Norway

Figure 1. The companies and countries involved in ITEA projects. Each partner’s name is followed by a
code denoting its involvement in the projects.



� Business: the way the resulting products
make a profit 

� Architecture: the technology needed to
build the system

� Process: responsibilities and depend-
encies during software development 

� Organization: the organization in which
the software is developed

Decisions made for one of these concerns af-
fect them all. Thus, such decisions must be
made carefully.

System family development started with
the implicit idea that a good family architec-
ture might benefit business. In other words,
by dealing with diversity in a managed way,
we might serve a larger, more predictable
market segment. If we are going to initiate
an architecture design and implementation,
we need a process to determine all the ac-
tions needed. We also need an organization
to implement the whole. Then we can ad-
dress the business consequences in light of
the results obtained.

The two main technical goals of the se-
quence of projects are to improve in both de-
velopment paradigms and reuse level. In the
case of our projects, the main architectural
improvements that will influence the designs
are developments in the computing plat-
forms, distribution and communication, the
development environments, and the soft-

ware development paradigms. In practice,
this means that we move toward compo-
nent-based development—that is, varying
products based on a single component-based
platform (see Figure 2). The platform is the
basis of the product family. Developers de-
sign, build, and test from a selection of the
platform’s assets. If they cannot obtain the
assets they need from the platform itself,
they must develop them. Later, the developer
might integrate these new, single-product as-
sets into the platform. The idea is simple but
the practice is hard, and this relates to all
BAPO concerns. The graph in Figure 3
shows the reuse-level terms introduced by
Ivar Jacobson, Martin Griss, and Patrik Jon-
sson.3 To move from bottom to top along
the y axis means that an increasing number

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 4 3

Component
base 

Family:
varying products

Selection and construction

Platform

Figure 2. Component-based platform as the basis for a family.
Reusable assets might include interfaces, designs, patterns,
requirements, supporting infrastructure, and test cases.

Re
us

e 
le

ve
l

Si
ng

le
 s

ys
te

m
s 

   
   

m
ul

tip
le

 s
ys

te
m

 fa
m

ili
es

Development paradigms

Structured
programming

Object-oriented
development

Component-based
development

Agent-based
development ??

Domain-
pervasive

reuse

Architected
reuse

Managed
reuse

Planned
reuse

Informal
code reuse

No
reuse

Figure 3. Moving
from single systems
to multiple system
families.



of assets other than software—for example,
designs, patterns, requirements, test specifi-
cations, and test results—become reusable.
In addition, planning and design of reuse be-
come necessary. The product family ap-
proach deals with architected reuse.

Our sequence of projects addressed vari-
ous software development issues. The ARES
project considered mainly architecture con-
cerns for system families, and the Praise proj-
ect considered mainly process issues. Praise
introduced a reference process model that we
use in Esaps and Café. The Esaps project
concentrated on creating and managing fam-
ily assets but also did some work on the ar-
chitecture and the organization. Café also
has a strong process focus, but it spends
more effort than the previous projects on or-
ganization and business issues. Café takes
into account issues at the very early and later
stages of development related to require-
ments engineering and testing.

The companies working in the different
projects agreed to use a particular set of
best practices. Table 1 groups these prac-
tices according to the development issues
discussed later.

Business
We began the sequence of projects with an

intuition that family development was good
for business, but we didn’t address the first
business concern, scoping, until Esaps. Now,
business concerns are an important topic in
Café. The scope determines the product fam-
ily’s range, and scoping decisions have im-
portant business impact. If the scope is too
wide, development becomes too costly; if it is
too narrow, the product family cannot serve
the market demand. We must choose project
objectives and a domain focus that are ap-
propriately scoped and aligned with the
broader strategic needs of the market and the
stakeholder organization. Scoping is not an
initial activity, but it must be performed over
the course of the family’s lifetime, because
new market demands might give rise to new
scoping solutions.

Esaps participants distinguished three
kinds of scoping: 

� Product family scoping: define the prod-
uct portfolio

� Domain scoping: identify the bound-
aries to relevant domains

4 4 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

Table 1
Project topics

Business Architecture Process Organization

ARES Dealing with variation Recovery from legacy systems
Architecture description
Resource management qualities

Praise Domain-specific architectures Family development practices
Family architecture Variability and commonality
Development tools Traceability between assets

Architectural decisions
Esaps Scoping Domain analysis Architecture assessment Platform and component

Aspect analysis Architecture recovery development
Family requirements Domain analysis
Architecture glossary Aspect analysis
Commonality and variability Family development process frameworks
Reference architecture Requirements modeling and traceability
Platform and components Change management

Evolution support
Variant configuration and derivation

Café Business and market Requirements engineering Asset management Asset management
analysis Heterogeneous platforms Traceability Validation and testing

Scoping COTS use Change management and impact analysis Product-line transition and adoption
Family development Design for quality Family transition and adoption Change management

transition and adoption Development tool support Configuration and version management Configuration and version 
Test modeling Product derivation management
Validation Family evolution Product derivation

Test strategy and methodology
Validation



� Asset scoping: identify reusable elements

Esaps activities dealt only with the latter
two. Domain scoping is related to domain
modeling activities; asset scoping is related
to feature analysis, which determines a
product’s commercial features. We used an
initial tool prototype to help us make scop-
ing decisions. 

The Café project must answer these im-
portant questions:

� From a market point of view, when is
defining a product line worthwhile?

� When and how should we introduce a
product family approach?

� How do we integrate existing processes
with the new ones derived from the
product family paradigm?

To evaluate these questions, we need an
economical analysis model. To make scop-
ing more effective, we want to relate it to
the business model. Finally, Café will deal
with the problems of introducing a family
development process into an organization.
Emphasis will be on which organizations
are suitable for product family develop-
ment, and how traditional organizations
can move toward product family processes.
The project will cover both lightweight and
heavyweight transitions.

Architecture
The ARES project focused on architec-

ture, as Figure 4 shows. One of the most
important results was a clear definition of
these architecture issues:

� Significant architecture requirements:
The architecture should make explicit
which requirements are significant for
the product family’s architecture. More-
over, it should be explicit whether a re-
quirement is functional or nonfunctional
(related to quality). The architecture
should relate all these requirements to
the design decisions made.

� Concepts: The architecture determines
concepts, which clarifies the system’s
organization.

� Structure: The architecture determines
the internal organization of the products.

� Texture: The architecture determines
the standard solutions for implementa-

tion problems. Developers can address
quality issues by using such standards. 

ARES spent much effort on the architec-
ture description. Having the right descrip-
tion mechanisms eases the modeling of vari-
ability. This modeling continued in Esaps. As
a result, we recognize that variability should
be modeled through variation points,3 which
denote places at which the family’s assets
might vary. Esaps distinguished between
variability in time and in space. This distinc-
tion strongly influences how the variability
will eventually be implemented.

Esaps investigated the subject of variabil-
ity. Designing system families requires find-
ing a way of architecting both commonality
and variability to exploit them during the
tailoring process. The product family archi-
tecture, or reference architecture, defines
the components (mandatory, optional, and
alternative), component interrelationships,
constraints, and guidelines for use and evo-
lution in building systems in the product
family. Consequently, the reference architec-
ture must support common capabilities
identified in the specification, the common-
ality, and the potential variability within the
product family. We then use the reference
architecture to create an instance of a par-
ticular architecture for a new variant.

Product line architecture modeling in
Esaps resulted in separating the concepts
variability in the large and variability in the
long term. This is a useful separation, be-
cause it relates to the type of equipment and
to the market. Moreover, the variation pat-
terns used differ for these categories. 

The Esaps project recognized the most
important reusable assets:

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 4 5

Architecturally significant requirements
• Functional
• Quality

• Layers
• Components
• Interfaces ...

Texture
• Patterns
• Coding standards ...

Concepts
• Client-server
• Resource manager ...

Structure

Figure 4. The ARES model of software architecture.



� Requirements, with variation points: stat-
ing stable and variable (planned) product
properties for all family members

� Domain model: describing all the enti-
ties that are important for all systems in
the family

� Architectures: determining how to config-
ure different software assets to build sys-
tems that satisfy the quality requirements

� Patterns: used in solving quality and vari-
ability issues during product development

� Design decision model: used in deter-
mining how to derive a product based
on specific requirements

� Software components: implementing the
functionality

� Interfaces between components: pro-
viding more stability than using the
components directly; often enabling
different implementations of the same
functionality

� Test cases, with variation points: used in
testing products in the family

� Product documentation: used by the
system’s end users

To build systems right, we must develop
our platforms and components carefully.
In many cases, we build the platform itself
from components. In the Esaps project, we
addressed component management, in-
cluding identifying and retrieving assets
and designing, implementing, and deliver-
ing components. We also investigated com-
ponent configuration support; we found
that in a product family context, each com-
ponent must carry much more information
than traditional software packages. The
Café project continued this work, empha-
sizing the independence of the underlying
commercially bought platform and the use
of commercial off-the-shelf (COTS) soft-
ware in the families. 

In ARES, Esaps, and Café, attention to
designing for quality was an important is-
sue. In a product family context, designing
for quality has specific challenges, because
the developers must make quality predic-
tions for all the products in the family. In
ARES, we addressed traditional qualities,
mainly those dealing with resource issues.

In Esaps, we gave specific attention to as-
pect analysis to deal with special system
views for various quality concerns. Aspect
analysis is inspired by the Building Blocks

practices4 in Philips Kommunikations Indus-
trie in the 1980s and early 1990s. PKI had
to survive in a niche market and therefore
needed to be very flexible. This architecture
was the basis for one of the first product
families in Philips. The developers consid-
ered three design dimensions independ-
ently—structure, aspects, and behavior—
and then assigned each piece of
functionality a place in each dimension. The
structure dimension determines the compo-
nent and layer where the functionality re-
sides. The behavior dimension determines
the threads in which the functionality is ex-
ecuted. The aspect dimension does a high-
level functional decomposition of the sys-
tem. Each piece of functionality was
assigned to a single aspect—for example,
operational behavior, logging, initialization
and termination, test management, process
management, and resource management.
Each component, called Building Block by
PKI, implemented all aspects. Sometimes
with the support of automatic code genera-
tion, we created a global design for each as-
pect. Esaps developers took up this idea to
see whether it would apply to more general
situations. Some investigated how this re-
lates to aspect-oriented programming. In
Café, attention is on using architectural
styles and patterns to address quality issues
at the architecture level.

Esaps developers did a lot of work on re-
quirements modeling for product families.
Within product families, requirements come
in several sorts. Some requirements hold for
the complete family, but others hold for
only one or a few systems. Requirements
might have variation points for different
family members. To be able to deal effi-
ciently with the requirements, it should be
clear what kinds of requirements are neces-
sary and useful in the family. Traceability is
related to this. Requirements must be traced
to family assets. In this way, we can deter-
mine which assets are necessary for which
set of product requirements. 

Praise and Esaps did a lot of work on
traceability modeling. Esaps came with a
distinction between pre- and post-traceabil-
ity, determining whether traceability is re-
lated to assets in an earlier or a later stage
than requirements modeling. In addition,
the developers distinguished between hori-
zontal and vertical traceability and whether

In a product
family context,

each component
must carry
much more
information

than traditional
software
packages.

4 6 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2



traceability remains at the same abstraction
level. This work continues in Café.

We studied ways (methods and tools) to
support the process of determining which
variants should be selected at each variation
point; this is an important step in deriving the
products. Esaps determined a framework for
the technology and the concepts related to
variability. The framework helps the devel-
opers recognize where and when variability is
needed and led to patterns often related to
variability. A crucial factor here is the right
choice of variable-point representation.

Process
The typical software development

process involves separate development for
each product; instead, we wanted to intro-
duce a development process incorporating
all of a family’s products. Moreover, the
process had to take into account asset reuse.
The advantage of this setup is that the total
development cost decreases after several
systems are built. The Praise project deliv-
ered an abstract reference family develop-
ment process (see Figure 5) that we carried
over into all activities in Esaps and Café.

There is a simple application develop-
ment process for developing single systems
involving

� Application requirements: determining
what the product should be

� Application design: selecting compo-
nents to make the product

� Application coding: combining compo-
nents using the infrastructure and possi-
bly additional product-specific code

The domain development process produces
family assets that the product development
process will reuse. This process involves

� Domain analysis: determining what the
family is about

� Domain design: deciding which plat-
form components are needed

� Domain implementation: building and
buying components and supporting in-
frastructure

Two important product family issues
dealt with at this point are traceability and
change management, which enable develop-
ers to plan and produce systems efficiently.
Traceability is connected to configuration
and version management. At any moment,
many system configurations are available in
the field. For maintenance reasons, we need
to know which versions of which assets are
used in which systems. The feedback loop is
essential for getting a manageable process.

The Esaps companies have implemented
this process in many different forms. The
development process distinguishes family as-
set development (domain engineering) from
product development (application engineer-
ing). The asset base is the repository of fam-
ily assets produced by domain engineering
and used by application engineering.

We can map Jacobson, Griss, and Jons-
son’s process classification3 to this model as
well. Their AFE (application family engi-
neering) is related to the activities in the
top-left hand block of Figure 5, CSE (com-
ponent system engineering) is related to the
other blocks in the top row, and ASE (ap-

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 4 7

Requirements Components

Family
asset
repository

Application
engineering

Application
requirements

Application
design

Application
coding

New
requirements

Domain
engineering

Domain
analysis

Legacy code
Domain
expertise Domain

implementation
Domain
design

TraceabilityTraceability

Domain terminology
Reference requirements
...

Reference architecture Reusable components

Feedback / adaptations /
reverse architecting 

Figure 5. The Praise
reference process.



plication system engineering) comprises the
bottom row.

Esaps presented all the process frame-
works used in the participating companies
in the same template, so we could compare
the different frameworks. We found room
for improvement in all the frameworks.
Esaps determined a clear set of necessary ac-
tivities and work products. In all cases, do-
main engineering and application engineer-
ing had separate processes. Because no
existing framework exhibited all the impor-
tant activities, we concluded that none were
sufficient for product family development. 

All Esaps partners already had a collec-
tion of systems in the field that should be-
long to the family and that need to be main-
tained for several more years. Moreover,
these systems contained assets that could be
transformed into family assets, to be
reusable in future family members. We be-
gan to define a process and tool support for
incorporating the already existing (legacy)
systems into the family domain, and we be-
gan to treat them as family members hence-
forward. Café continues on this track and
has introduced the incorporation of third-
party software and COTS into the family. 

The Café project is based on the same
Praise reference process, with a focus on the
very early and late subprocesses and the ma-
jor activities shown in Figure 5. The Café pro-
ject’s results have the form of structural rules
for assets, methods, procedures, and organi-
zational structures. We will use these results
to build new applications in the families and
to provide requirements for tool vendors. 

Change management lets us predict the
properties of variants and new family assets
before building them. The Esaps project did
some initial investigation of change manage-
ment, and these efforts are continuing in
Café. Changes in one asset of a family might
affect many products in several ways, so we
must be careful with changes. Guidelines
and automated support are essential for
identifying and supporting required changes
caused by the modification of a given soft-
ware artifact. These guidelines might be ac-
complished by specifying specific tradeoffs
or constraints on specific products or prod-
uct parts. Moreover, it is necessary to be
able to select the requirements for a single
member of the family and then to quickly
select the assets needed to build that mem-

ber. Esaps proposed a decision model, based
on a requirement hierarchy, for deriving
family members.

Depending on the specific functional or
quality requirements, the architect selects
the product variants to be delivered and
then builds the executable system based on
that selection. Esaps investigated how to
manage family assets so that developers can
find what they need. The project built meta-
models to improve asset classification and
introduced methods for effectively selecting
components and interfaces in an asset base.

ARES started the first investigation of ar-
chitecture assessment, the process of measur-
ing system properties based on an architec-
ture description. The project performed a
small assessment related to timing behavior
and proposed tool support for analyzing the
timing behavior. A more complete assessment
case study within Esaps resulted in some ad-
ditions to traditional architecture assessment.
However, we did not find much difference
from traditional architecture assessment.

Domain analysis is one of the basic activ-
ities in product family development. All sys-
tems in the family belong to the same do-
main or a small set of domains, and the
result of the domain analysis, the domain
model, is usable for all these systems. The
domain model is crucial for the family ar-
chitecture, because the complete family
architecture is based on the domain. Only
when the developer knows the domain’s
boundaries can he or she efficiently deter-
mine the domain model.

ARES experimented with and had some
success in recovering architecturally useful
information from existing assets, informal
documentation, and interviews. Esaps con-
tinued this work in the automatic verifica-
tion of conformance to architectural rules
during development, and the work con-
tinues in Café.

Tool support is crucial. Product family
development needs tool support to manage
the assets, model the domain, support trace-
ability, and help the architects and develop-
ers easily do the right things. In addition,
the (semi)automatic derivation of products
from specific product requirements would
be very helpful. No good tool support exists
for this. In ARES’ focus on techniques for
product family architecture, it found that a
simple language works best. However, most

All Esaps
partners

already had 
a collection of
systems in the

field that should
belong to the

family and that
need to be

maintained for
several more

years. 

4 8 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2



commercial tools support complex lan-
guages that divert the attention of architects
to issues that are important only in later
stages of development. Esaps produced a
collection of tool requirements. Café will
get a more complete picture of requirements
for tool support.

Organization
The projects have not done much work

on organization yet, but Café will investigate
this aspect. During Esaps, we investigated
only briefly the organizational consequences
of a product family development approach.
We concluded that separate development
groups should work on family engineering
and product engineering. In fact, division
into three development organizations might
be a good idea.3 However, we found that
good experiences also occur when we com-
bine all responsibilities and split the depart-
ments orthogonally to the process categories.
So, we concluded that it is still not clear
when and why a development organization
should be separated into family and product
development departments.

W hile the European movement to-ward product family engineeringtook place, researches in the US
founded the SEI Product Line Initiative.5

This initiative had the same objectives: im-
proving and introducing product families
(product lines) into industrial organiza-
tions. Apart from this, we know of no other
large-scale product family engineering ef-
forts. In contrast to the SEI initiative, the
companies involved initiated the European
projects. This was based on their own ex-
periences and their own economic need for
product families. The European movements
joined forces to learn from each other. The
founding companies selected research insti-
tutes according to their added value for the
initiative.

The SEI initiative gives general guidelines
on best practices for many areas. It puts a
lot of work into the management process,
which the European projects only partially
address. In the European projects, we found
many cultural differences among organi-
zations, which led to different emphases on
different management issues. Moreover, we

are acting in a bottom-up way. We try to
learn from each other and adopt each
other’s best practices. We do not want to
force the participants to take over practices
that do not fit their culture. This means that
the European projects came up with a large
variety of solutions to the same problem, in
contrast to the SEI initiative, which pro-
motes a single framework.

To bring the rest of the world into the
discussion, we have been running a se-
quence of workshops on product family en-
gineering.6–8 During the first workshop, we
came in contact with the SEI Initiative par-
ticipants; now, we meet each other several
times a year at conferences and workshops
and exchange ideas for improvement. We
feel we benefit from this contact, so we will
continue to present our workshops.

References
1. M. Jazayeri, A. Ran, and F. van der Linden, Software

Architecture for Product Families, Addison-Wesley,
Reading, Mass., 2001.

2. R. van Ommering, “Beyond Product Families: Building
a Product Population?” Proc. Software Architectures
for Product Families, Lecture Notes in Computer Sci-
ence 1951, Springer-Verlag, Berlin, 2000, pp. 187–198.

3. I. Jacobson, M. Griss, and P. Jonsson, Software Reuse,
Addison-Wesley, Reading, Mass., 1997, p. 21.

4. F.J. van der Linden and J.K. Müller, “Creating Architec-
tures with Building Blocks,” IEEE Software, vol. 12,
no. 6, Nov. 1995, pp. 51–60.

5. P. Clements and L. Northrop, Software Product Lines,
Addison-Wesley, Reading, Mass., 2001.

6. Proc. Development and Evolution of Software Architec-
tures for Product Families, F. van der Linden, ed., Lec-
ture Notes in Computer Science no. 1429, Springer-Ver-
lag, New York, 1998.

7. Proc. Product Family Engineering, F. van der Linden,
ed., Lecture Notes in Computer Science no. 2290,
Springer-Verlag, New York, 2002.

8. Proc. Software Architectures for Product Families, Lec-
ture Notes in Computer Science 1951, Springer-Verlag,
Berlin, 2000.

For more information on this or any other computing topic, please visit our
Digital Library at http://computer.org/publications/dlib.

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 4 9

About the Author

Frank van der Linden is an international project leader at Philips Medical Systems,
where he coordinates international-cooperation projects in software engineering for product
families. He is also project manager for the ITEA projects Esaps and Café and was Philips’ proj-
ect leader of ARES (Architectural Reasoning for Embedded Systems). His main interests are in
software engineering and architecture, with an emphasis on process and organization, and
quality issues. He received a PhD in pure mathematics from the University of Amsterdam. He
is a member of the Dutch Mathematical Society and of the Dutch Association for Theoretical
Computer Science. Contact him at Philips Medical Systems, Veenpluis 4-6 5684 PC Best, Nether-
lands; frank.van.der.linden@philips.com.



5 0 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2 0 7 4 0 - 7 4 5 9 / 0 2 / $ 1 7 . 0 0  ©  2 0 0 2  I E E E

Experience shows that a company can
drastically improve its competitive advan-
tage if it optimizes how it develops these
product lines.1,2 Using product line engineer-
ing, some organizations have reduced the
number of defects in their products and re-
duced costs and time to market by a factor
of 10 or more.1,3 However, many companies
don’t use a product line engineering ap-
proach when developing their product lines.
More often than not, they either start from a
single system, branching off new variants as
the need arises and ending up with com-
pletely independent code bases, or they start
with the different variants as independent
projects from the beginning. 

Product line engineering focuses on de-
veloping multiple variants of systems
jointly, thus exploiting the commonality
among systems in the form of reuse.1 The
key to successful product line engineering

approaches, such as Pulse4 (a component-
based product line development approach
developed at the Fraunhofer Institute for
Experimental Software Engineering), is to
identify early on a reference architecture
that provides a blueprint for producing dif-
ferent variants. The structural similarity
among the variants, resulting from the com-
mon architecture, enables developers to
reuse components across a range of differ-
ent products in the product line. However,
when implementing product line engineer-
ing, a wealth of options exists, so compa-
nies must make wise decisions to optimize
their economic benefit. To exemplify this,
we discuss Market Maker Software AG’s3

Merger product line.

Product line adoption schemes
In theory, the optimal product line devel-

opment adoption scheme is to set up a com-

focus
The Economic Impact of
Product Line Adoption and
Evolution

Klaus Schmid, Fraunhofer Institute for Experimental Software Engineering

Martin Verlage, Market Maker Software AG

When transitioning
to product line
development, an
organization must
consider the
adoption context and
should use product
line scoping
techniques to
optimize the
economic benefits.

S
oftware is increasingly turning into a commodity; thus, people in-
creasingly expect systems that are customized to their needs. This
situation is forcing nearly every software development organiza-
tion to develop multiple variants of their systems to serve the spe-

cific needs of different customers or market segments. Thus, many, if not
most, software development organizations are finding that they need to
build families of systems or product lines. 

initiating software product lines



pletely new product line by developing a reuse
infrastructure for the whole range of products
right from the start. We often call this the big
bang approach. You can use this infrastruc-
ture to develop new products, which could
drastically cut costs compared to traditional
stovepipe development. Of course, when first
planning a product line, predicting the spe-
cific investments and benefits is hard, so eco-
nomic results will contain some uncertainty. 

Unfortunately, this ideal approach is
hardly ever adequate in practice. In principle,
strong upfront planning should let you de-
velop assets that support the full range of
functionality the product line requires, but
organizations often use a more incremental
approach. With an incremental approach,
you develop assets to support the next few
upcoming products, deliberately excluding
highly uncertain potential products. Over
time, you need to extend and adapt assets to
address further products. Usually, constraints
on available resources force this more incre-
mental approach, but it’s generally useful
even with unlimited resources because of the
intrinsic uncertainty of future products and
their requirements. Figure 1a shows the ideal
big bang pattern, and Figure 1b compares it
with the corresponding patterns for the in-
cremental approach. 

Regardless of which approach you use, it
is best to first distinguish several basic situa-
tions from which product line adoption can
start. You can then link each situation to cor-
responding strategies (or adoption schemes)
and connect a different pattern of investment
and resulting benefits to each one. 

We can distinguish four main types of situ-
ations for adopting product line engineering:

� Independent. The company starts a new
product line without any predecessor
products.

� Project-integrating. Existing systems are
already under development to address a
new market. As part of product line de-
velopment, the software engineers inte-
grate the systems so that they can derive
them from the same reuse infrastructure.

� Reengineering-driven. Legacy systems
already exist, but the engineers can’t use
them for product line development—
rather, they need to perform a nontrivial
reengineering effort.

� Leveraged. The company sets up a new
product line (to address a new market)
based on a product line that is already
in place.

In practice, these situations often overlap.
Consider Market Maker’s Merger product

line. Market Maker started in 1990 as a one-
person company with a single product: a
DOS-based system for tracking stock infor-
mation. It has since grown to 60 employees,
but to optimize its limited resources, Market
Maker has always used a product line ap-
proach. Even in the DOS version, various
modules were available to address specific
data-processing needs, and customers could
independently bring in other modules. (How-
ever, the implementation level only had a sin-
gle variant and certain menu entries enabled,
based on the given license key.) 

As the company created new software
platforms, it found it had to develop more
sophisticated approaches to address increas-
ingly complex variability needs. In 1995, it
started developing a new software system
aimed at supplanting the original DOS-
based product and transferring its potential
to the Windows-based age. Like the original
product, the new system supported the mod-
ule concept. However, over time, the com-
pany created additional implementation-
level variants (for special applications) and

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 5 1

Risk

Break even Number of products Number of products

Initial
investment

Big bang
product line
development

Traditional
development

Product line
development

Incremental
product line
development

(a) (b)

Ef
fo

rt

Ef
fo

rt

Figure 1. Product line investment curves: (a) the big bang approach, including risks; (b) the big bang
versus incremental approach.



entry-level mass-market variants. These vari-
ants constituted the Market Maker product
line—the company produced them from a
single, common code base. 

In 1999, the company decided to enter
the market of Internet-based stock-market
information systems. It thus created the
Merger product line, which was based on a
completely new infrastructure developed in
Java (Martin Verlage managed the Merger
product line’s setup and evolution). Cur-
rently, this product line includes about 15
variants addressing three different market
segments (see Figure 2a). When developing
Merger, the company decided not to repli-
cate functionality that already existed in the
Market Maker product line—such as the
MM98 and MM live variants that address
the historical data feed and the real-time
data feed, respectively. So, it created specific
variants of the Market Maker product line
and used them as data servers in the Merger
installations (see “MM98” in Figure 2b). 

When adopting and evolving its product
line approach for these two product lines,
Market Maker applied the schemes we dis-
cuss here with huge success. 

Product line entry and exploitation
potential

Depending on the specific situation in
which you start product line development,
you usually find different patterns of how the
company incrementally develops the product
line and, similarly, different patterns of in-
vestment and return on investment. In partic-
ular, you need to determine whether the in-

crement originates by successively extending
and adapting the reuse infrastructure for ad-
ditional products, or whether the company
extends it by successively adding assets cov-
ering additional functionality.

Independent adoption 
The independent product line adoption

scenario is the prototypical product line situ-
ation (see Figure 1a). Because no products ex-
ist yet, the company can plan in detail and
optimize its product portfolio. Compared to
the product line’s overall setup time, the plan-
ning time would be rather low, so it wouldn’t
significantly increase the time to market. 

However, starting a completely new
product line means venturing into the com-
pletely unknown. Thus, technical feasibility
studies and detailed market analyses are
necessary to control the overall uncertainty.
Furthermore, even if you use these meas-
ures, you usually still have significant un-
certainty, because, for example, some prod-
ucts could become more or less important as
product development progresses. 

In the context of the Merger product line,
the company made a detailed analysis of po-
tential portfolios, identifying major market
segments, key requirements, and so forth.
Additionally, it performed technical feasibil-
ity studies and competitor surveys. Al-
though these analyses were rather thorough,
plans still required adjustment. For exam-
ple, the company addressed some market
segments later than anticipated or not at all,
because more products than expected could
be delivered to the customer in the initial

5 2 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

Qtr. 1  Qtr. 2  Qtr. 3
2000

(b)(a)

Qtr. 4

5

4

3

2

1

0

RMI
RMI

Application layer

RMI

Servlets

Data access layer

JDBC/ODBC

HTTPHTTP

Java wrapper

COM interface
COM interface COM interface

Java wrapper Java wrapper

MM live! MM live!
MM98

WAP

Banks
intranet External

applications

Chart
data

Basic
data

Market segment 1
Market segment 2
Market segment 3

Figure 2. The Merger product line: (a) systems delivered over time and (b) the product line architecture.



market segments. Despite these deviations,
it is clear in retrospect that the initial efforts
were not wasted. Rather, they played a key
role in focusing the reuse infrastructure’s de-
velopment, so now Market Maker can effi-
ciently develop new variants. 

Project-integrating adoption
From our experience in industrial prac-

tice, we’ve found that the independent situa-
tion is rather uncommon. Usually, several
products exist in a company that have some
commonalities but were more or less inde-
pendently developed. There is continuous
pressure to bring to market new products, so
it is impossible to put product development
on hold to focus on developing an integrated
product line infrastructure. Rather, an incre-
mental approach is required, where key
components are successively generalized into
common, reusable components.

A special case of the project-integrating
situation exists when two product line in-
frastructures must merge. Such a situation is
currently occurring at Market Maker—the
company is integrating the original Market
Maker and Merger product lines into a sin-
gle product line architecture. Although
companies can usually avoid project-inte-
gration by replicating functionality among
the two product lines, at times profound
differences in the nonfunctional require-
ments make it necessary. In this situation,
the company integrates the reuse infrastruc-
tures, focusing on integrating the replicated
components. Because the company must
continually derive new products and re-
leases from the product lines, it can only
perform an incremental, component-wise
integration of the reuse infrastructures—
similar to the incremental pattern Figure 1b
shows. However, if compared to the initial
situation, the entrance barrier (the effort re-
quired before you can derive the first prod-
ucts from the resulting infrastructure) is
usually lower, whereas the number of steps
(effort to extend the product line infrastruc-
ture) will be higher. Also, the company gen-
erally must expect more problems with the
degradation of the reference architecture.

This is the general adoption pattern for
project-integrating product line develop-
ment—create a common infrastructure by
integrating technical areas in a component-
wise manner. This leads to an incremental

approach, similar to the one in Figure 1b.
However, compared to the initial situation,
the entrance barrier (effort required until
the first products can be derived from the
resulting infrastructure) will usually be
lower, while the steps (effort to extend the
product line infrastructure) will usually be
higher. Also, more problems generally occur
with the degradation of the reference archi-
tecture over time.

Reengineering-driven adoption
A company usually undertakes reengi-

neering-driven adoption if it finds that its
software development is bound to hit a wall.
This can manifest itself in many ways—for
example, if the cost of product development
grows too high or if it becomes impossible to
derive new, envisioned products based on the
available systems. Companies typically will
tolerate a certain level of pain before making
the investments associated with performing a
major reengineering effort. However, when
they do undergo such reengineering, it’s then
fairly easy to introduce the additional effort
required to plan a product portfolio. Reengi-
neering can either focus on packaging the ex-
isting legacy system as a whole or it can aim
at a component-wise approach. 

This situation is similar to independent
adoption and its economic patterns. If the
company packages the legacy as a whole, it
incurs rather large investments in the begin-
ning but significantly reduced costs for devel-
oping future systems (see Figure 1a). If the
company performs component-wise packag-
ing, an incremental pattern (see Figure 2b)
will result, but reengineering generally re-
quires a large initial investment compared to
typical project-integrating situations. 

A good example of the component-wise
approach to reengineering-driven adoption
is the Ramsis kernel redesign project that
Fraunhofer IESE performed with a small
company. This project focused on a reengi-
neering-driven product line design for a
large legacy system of ergonomy simula-
tions.5 It started with a significant reengi-
neering effort for identifying components in
the existing system and packaging them to
turn the system into an appropriate basis
for further product line development. 

Developing the Merger product line also
mirrors this situation, because, as discussed
earlier, the company reused Market Maker

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 5 3

There is
continuous
pressure 
to bring to

market new
products, so it
is impossible to

put product
development 

on hold to focus
on developing
an integrated
product line

infrastructure. 



functionality as servers, and prior to that, it
had to add specific interfaces to these
servers. However, for Merger, packaging
only required augmenting the existing sys-
tems with appropriate interfaces using
COM. Also, the Merger product line was
built on top of the existing one, which is
why it’s more appropriately characterized as
leveraged product line adoption. 

Leveraged adoption
Leveraged product line development is

perhaps the most sophisticated approach to
product line adoption. As opposed to the
other patterns, it requires an existing product
line and is characterized by a shift to a new
market (system type). Examples of such a
shift are Cummins Engines, which expanded
its original product line for car and truck
diesel engines to arbitrary industrial diesel
engines, and CelsiusTech, which leveraged its
product line of battle ship control systems by
entering the market of civil air-control sys-
tems.6 In these cases, the existing product line
infrastructures provided leverage for entering
the new market, giving the company a com-
petitive advantage right from the start. 

The Merger product line is clearly a case
of a leveraged product line. The existing
Market Maker product line offers leverage
by providing data gathering, data manage-
ment, and aggregation services, while the
Merger infrastructure mainly focuses on
data transformation and online presenta-
tion tasks. Market Maker packaged its orig-
inal product line’s functionality into Merger
in the form of servers. This partitioning of
the reuse infrastructure also benefits Merger
products through ongoing development on
the Market Maker product line. 

From an economic viewpoint, a leveraged
product line adoption entails a revolution,
because the company can address a com-
pletely new market segment with low costs
and few risks by building on an existing
product line infrastructure. However, as in
other situations—in particular, the independ-
ent situation—the company must perform a
detailed product portfolio analysis, technol-
ogy studies, and risk analysis. Similarly,
leveraged adoption usually requires an initial
investment and then shows a steady growth
in the number of systems (see Figure 1a). For
Merger, the leveraged approach proved to be
highly successful. However, Figure 2a shows

a slightly different pattern of nearly expo-
nential growth. The reason for this is that the
Merger reuse infrastructure itself grew over
time. Thus, later systems could be built with
more reuse. 

Product line evolution
The main factor determining how a

product line evolves is how much deviation
the organization allows before reunifying
the infrastructure. We can distinguish three
basic situations for product line evolution
(not taking into account replacing the infra-
structure’s parts over time).

In the first situation, infrastructure-based
evolution, new product requirements that
might be reusable immediately lead to a gen-
eralization of the product line infrastructure.
Thus, the organization can avoid the prob-
lem of multiple implementations of the same
requirement. However, this usually results in
many changes to the product line infrastruc-
ture. A specific product (the first one in need
of a new requirement) triggers each change,
which is implemented in a way adapted to
the next few products (see Table 1). Market
Maker took this approach with its Merger
product line. If it hadn’t, the simultaneous
demands for many new variants would have
created a strong dispersion into variants of
the product line infrastructure. The advan-
tage is that for the second product requiring
the functionality, it is already reusable. This
can lead to the superlinear increase that Fig-
ure 2a shows.

The second situation, branch-and-unite, is
common in industrial practice. Here, the or-
ganization creates a new version branch for a
new variant and then reunifies this branch
with the original infrastructure after releas-
ing the product. In this case, the organization
typically considers only a single product, al-
though more experienced organizations also
consider requirements for future products
when determining an adequate implementa-
tion. Market Maker successfully pursued this
approach with its first product line. The
main reason for applying this approach is
that new variants are rather infrequent and
thus usually nonoverlapping. This wasn’t the
case with the Merger product line.

Some organizations end up in a bulk situ-
ation, which allows larger branching of the
reuse infrastructure. Then, at certain inter-
vals, the organization reintegrates the prod-

From an
economic
viewpoint, 

a leveraged
product line

adoption entails
a revolution,
because the
company can

address a
completely new
market segment
with low costs
and few risks. 

5 4 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2



uct line infrastructure. Larger organizations
usually apply this approach, but it’s best to
avoid it as much as possible. It not only leads
to major reintegration efforts (mapping to
big jumps in the economic curve in Figure
1b), but it also usually entails significant syn-
chronization efforts and quality problems.

The different patterns of product line
evolution we’ve identified have different re-
quirements in terms of look-ahead planning
and the number of products simultaneously
integrated into the product line infrastruc-
ture (see Table 1).

Product line planning techniques
How an organization performs product

line adoption and evolution strongly influ-
ences its product line’s overall economic re-
sults. However, even if it selects a specific
adoption approach, it still must decide
which products to consider when develop-
ing or extending the product line infrastruc-
ture, which technical areas to integrate next
into its product line infrastructure, and
which requirements reusable assets will di-
rectly support. Just as the basic adoption

and evolution steps determine the product
line development’s basic economic pattern,
answers to these questions help fine-tune
product line development and its economic
characteristics. Restrictions for answering
the questions depend on the specific adop-
tion or evolution situation (see Table 2).

Based on the types of decisions that must
be made, we can distinguish the following
three levels of decision making—or scoping—
in the context of product line engineering:7

� Product portfolio scoping: Which prod-
ucts shall be part of the product line?

� Domain-based scoping: Which technical
areas (domains) provide good opportu-
nities for product line reuse?

� Reuse infrastructure scoping: Which
functionalities should the reuse infra-
structure support?

Affluency in these three scoping techniques
will help you make the right decision when
adopting and evolving a product line. 

Product portfolio scoping helps establish
a detailed vision of the products and their

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 5 5

Table 1
Product line adoption and evolution patterns

Situation type Product line planning look-ahead Approach

Adoption Independent Broad portfolio of future systems Big bang 
Project-integrating Medium-size portfolio of future products Incremental, by functional area or component
Reengineering-driven Broad portfolio of future products and Incremental, by functional area or component, or  

legacy products big bang, by packaging existing legacy as a whole
Leveraged Broad portfolio of future products Big bang 

Evolution Infrastructure-based A small number of products Incremental, by product

Branch-and-unite Single product Incremental, by product
Bulk A small number of products Incremental, by product group

(perhaps a market segment)

Table 2 
Scoping techniques and their relation to product line adoption

Mode of product line Portfolio definition Domain-potential analysis Reuse infrastructure scoping
extension

Partial big bang and Very important Recommended, but Recommended to support
evolution by product group mainly for risk analysis architecture definition

By (single) product Not necessary Only needed if the extension Only needed if the extension 
requires restructuring requires restructuring

By component or Should be performed Key for identifying the next Should be applied to support
functional area component for product line architecture definition

extension



requirements. First, you identify the general
market potential based on market analyses,
taking into account the market structure,
potential customers, end-user needs, and the
positioning of competitors. Then, you iden-
tify the market segments that fit the com-
pany background. This usually happens in a
workshop representing the most relevant
stakeholder groups. While coming up with
an integrated definition of the product port-
folio, it is important to address questions
such as, “Will the products compete with
each other on the market?” and “How
much will it cost to develop these prod-
ucts?” It helps even if you just informally
ask these questions.

While setting up the Merger product line,
Market Maker performed a detailed product
portfolio scoping. It analyzed markets and
competitors, developing a first vision of po-
tential market segments and products. This
provided the necessary input for technical
feasibility studies. At the same time, it re-
fined the initial vision of the portfolio in sev-
eral iterations. This actually led to rather se-
vere changes, such as introducing additional
market segments in the product line vision.
You only need to perform this full-size ap-
proach if you develop a new product portfo-
lio. Otherwise, just identify changes to the
product portfolio—technical feasibility and
market studies are usually not so important.

Based on a product portfolio definition,
you can perform domain-based scoping.
With this approach, you identify the main
technical domains relevant to the product
line and analyze their reuse potential. Differ-
ent technical domains, even within the same
product line, can vary considerably in terms
of their potential benefit and inherent risks
for product line engineering. Market Maker

applied this approach to domain-potential
analysis, which is part of the Pulse-Eco
method,8 for the Merger product line. In this
case, Market Maker observed variations
from “extremely well suited for product line
reuse” to “not suited at all.” In particular,
domain-based scoping identifies areas where
a reuse investment is particularly meaning-
ful, which is especially important if the prod-
uct line infrastructure is built in an incre-
mental manner (for example, in a
project-integrating adoption situation). Fur-
thermore, it can help you decide what func-
tionality to integrate next into the product
line. In a situation such as the one with the
Merger product line, where the organization
basically built a full product line infrastruc-
ture with the first product, this approach is
typically used only to inform the develop-
ment of potential reuse risks (see Table 2).

Once you identify the key areas for prod-
uct line reuse, the important question is
which functionalities should be made
reusable in the context of the specific prod-
uct line, which involves reuse infrastructure
scoping. The Pulse-Eco approach supports
this activity in a quantitative manner. With
reuse infrastructure scoping, you develop
quantitative models to capture the desired
product line benefits. You then use these
models to identify functionalities that will
provide the highest economic benefit if made
reusable. This provides economic input for
the architecture definition. Because of this
focus on guiding the product line’s imple-
mentation, this form of scoping is particu-
larly useful when large parts of the product
line infrastructure are built for the first time.
This is the case if whole product groups or
new functional areas must be integrated into
the product line infrastructure. Market
Maker applied this approach when extend-
ing certain functional areas for its Market
Maker product line. In this case, the ap-
proach provided valuable input for making
the most appropriate functionality reusable.7

P roduct line development is about tochange how we perceive and per-form software development. This
transition is similar to the one made from
craftsmanship to industrial production. Al-
though this transition is strongly based on
the increased understanding of software ar-

5 6 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

About the Authors

Klaus Schmid is competence manager for value-based product line development at
Fraunhofer IESE, where he has been involved in several projects that have transferred product
line engineering concepts to industrial environments. He was also a member of the Pulse de-
velopment team. His main research interests are the economic aspects of product line develop-
ment and approaches for introducing and institutionalizing product line development in indus-
try. He received an MS in computer science from the University of Kaiserslautern. Contact him
at Fraunhofer Inst. for Experimental Software Eng., Sauerwiesen 6, D-67661 Kaiserslautern,
Germany; klaus.schmid@iese.fhg.de.

Martin Verlage is director of the Online Products business area at Market Maker Soft-
ware AG. His main software development interests are in the area of component-based soft-
ware engineering, especially architecting and testing. He received an MS and PhD in computer
science from the University of Kaiserslautern. He is a member of the Gesellschaft für Infor-
matik e.V. Contact him at Market Maker Software GmbH, Karl-Marxstr. 13, D-67655 Kaiser-
slautern, Germany; m.verlage@market-maker.de.



chitectures, it is also changing how organiza-
tions go about their software business. During
the industrial revolution, becoming a modern
company involved more than just adding an
assembly line to the factory floor. Likewise, it
will not be sufficient for organizations to
switch to product line development in an ar-
bitrary way. Rather, a company must ade-
quately adopt such an approach, and the ap-
proach must evolve from the perspective of
potential economic benefits. To successfully
reap these benefits, companies will have to
develop an in-depth understanding of product
line development’s economic implications and
how these implications relate to the possible
product line adoption and evolution mecha-
nisms. 

Acknowledgments
The Eureka 2023 Programme, ITEA (Information

Technology for European Advancement) projects
ip00004 and 99005, Café (from concepts to application
in system-family engineering), and ESAPS (Engineering
Software Architectures, Processes, and Platforms for
Systems-Families) partially supported the work pre-
sented in this article. 

References
1. P. Toft, D. Coleman, and J. Ohta, “A Cooperative Model

for Cross-Divisional Product Development for a Software
Product Line,” Proc. 1st Software Product Line Conf.
(SPLC1), Kluwer, Dordrecht, Netherlands, 2000, pp.
111–132.

2. J.C. Dager, “Cummin’s Experience in Developing a Software
Product Line Architecture for Real-Time Embedded Diesel
Engine Controls,” Proc. 1st Software Product Line Conf.
(SPLC1), Kluwer, Dordrecht, Netherlands, 2000, pp. 23–46.

3. L. Northrop and P. Clements, Software Product Lines,
Addison-Wesley, Reading, Mass., 2001.

4. J. Bayer et al., “PuLSE: A Methodology to Develop Soft-
ware Product Lines,” Proc. 5th Symp. Software Reusability
(SSR’99), ACM Press, New York, 1999, pp.122–131.

5. J. Bayer et al., “Transitioning Legacy Assets to a Product
Line Architecture,” Proc. 7th European Software Eng.
Conf. (ESEC’99), Springer Verlag, New York, 1999, pp.
446–463.

6. P. Clements, “On the Importance of Product Line Scop-
ing,” Proc. 4th Workshop Product Family Eng. (PFE’4),
Springer Verlag, New York, 2001, pp. 70–78.

7. K. Schmid, “Scoping Software Product Lines: An Analysis
of an Emerging Technology,” Proc. 1st Software Product
Line Conf. (SPLC1), Kluwer, Dordrecht, Netherlands,
2000, pp. 513–532.

8. K. Schmid, “A Comprehensive Product Line Scoping Ap-
proach and Its Validation,” Proc. 24th Int’l Conf. Soft-
ware Eng. (ICSE’02), ACM Press, New York, 2002, pp.
593–603.

For more information on this or any other computing topic, please visit our
Digital Library at http://computer.org/publications/dlib.

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 5 7

The exploding popularity of mobile Internet access, third-generation wireless
communication, and wearable and handheld devices have made pervasive
computing a reality. New mobile computing architectures, algorithms,
environments, support services, hardware, and applications are coming online
faster than ever. To help you keep pace, the IEEE Computer Society and IEEE
Communications Society are proud to announce IEEE Pervasive Computing.

This new quarterly magazine aims to advance mobile and ubiquitous
computing by bringing together its various disciplines, including peer-reviewed
articles on

• Hardware technologies
• Software infrastructure
• Real-world sensing and interaction
• Human–computer interaction
• Security, scalability, and privacy

SUBSCRIBE NOW!

http://computer.org/pervasive

NEW FOR 2002

M. Satyanarayanan
Carnegie Mellon Univ. and Intel Research Pittsburgh

Associate EICs

the IEEE Computer & Communications Societies present  

IEEE PERVASIVE COMPUTING

Editor in Chief

Roy Want, Intel Research; Tim Kindberg, HP Labs; 
Deborah Estrin, UCLA; Gregory Abowd, Georgia Tech.;

Nigel Davies, Lancaster University and Arizona University



5 8 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2 0 7 4 0 - 7 4 5 9 / 0 2 / $ 1 7 . 0 0  ©  2 0 0 2  I E E E

FODA appeals to many product line develop-
ers because features are essential abstractions
that both customers and developers under-
stand. Customers and engineers usually speak
of product characteristics in terms of the
features the product has or delivers, so it’s
natural and intuitive to express any com-
monality or variability in terms of features.
A feature-based model thus provides a basis
for developing, parameterizing, and configur-
ing reusable assets. 

Although requirements are essential inputs
for core asset development, they are not suffi-
cient on their own; a marketing and product
plan (MPP) can help propel asset develop-
ment. We extended FODA into the Feature-
Oriented Reuse Method (FORM) not only to
support architecture design and object-ori-
ented component development but also to in-
corporate a marketing perspective and explore
analysis and design issues from that perspec-
tive.6 With an MPP, reuse is not opportunistic;
it is carefully planned for a specific product
line. Our customers have applied this method

to several industrial application domains to
create software engineering environments and
software assets for a specific product line.4

Here, we’ll use a home integration system ex-
ample to show how the FORM brings effi-
ciency to product line development.

FORM
FORM product line engineering consists

of two major processes: asset development
and product development. (See Figure 1 for
activities and their relationships.) Asset de-
velopment consists of analyzing a product
line (such as marketing and product plan de-
velopment and refinement, feature model-
ing, and requirements analysis) and develop-
ing architectures and reusable components
based on analysis results. Product develop-
ment includes analyzing requirements, se-
lecting features, selecting and adopting an
architecture, and adapting components and
generating code for the product.

The MPP identifies the information to
gather during the marketing and business

focus
Feature-Oriented Product
Line Engineering 

Kyo C. Kang and Jaejoon Lee, Pohang University of Science and Technology

Patrick Donohoe, Software Engineering Institute, Carnegie Mellon University

The Feature-Oriented
Reuse Method
concentrates on
analyzing and
modeling a product
line’s commonalities
and differences in
terms of features
and uses this
analysis to develop
architectures and
components. The
FORM explores
analysis and 
design issues 
from a marketing
perspective.

P
roduct line software engineering is an emerging paradigm that helps
organizations develop their wares from reusable core assets rather
than from scratch.1–3 However, to develop these assets, such soft-
ware engineering must exploit commonality and manage variability.

Many researchers in industry and academia started using a feature-oriented
approach to commonality and variability analysis4 after the Software Engi-
neering Institute introduced Feature-Oriented Domain Analysis in 1990.5

initiating software product lines



analyses. It includes a market analysis, a mar-
keting strategy, product features, and prod-
uct feature delivery methods. 

To start the asset development process,
developers organize functional and non-
functional product features from the MPP
into an initial feature model, which they
then extend with design features—operating
environments, the domain technology avail-
able, and the implementation techniques to
be used. In parallel, a product line require-
ments analysis elicits and organizes require-
ments in terms of a use case model and an
object model.7 A use case model defines in-
teractions between the user and the system;
an object model defines system responsibili-
ties. The developers then refine the original
MPP with the help of both the feature and
requirements models. 

The next step is conceptual architecture
design, which allocates features to abstract
architectural components and specifies the
data and control dependencies between
them. The result is a conceptual architecture.
A design object model must be developed
based on the conceptual architecture, the
feature model, product line requirements,
and other information such as any commer-
cial off-the-shelf components or design pat-
terns8 relevant to the product line. 

Designers then refine this conceptual archi-
tecture into process and deployment architec-
tures by allocating components to concurrent
processes and network nodes, considering
whether to replicate each process, and defin-
ing interaction methods between processes.

(The process architecture represents concur-
rency structure in terms of concurrent
processes or tasks to which functional ele-
ments are allocated; the deployment architec-
ture shows an allocation of processes to hard-
ware resources.) The component design
activity then further refines the process and
deployment architectures into concrete com-
ponents by using the design object model. 

The MPP provides quality attributes for
architecture design and refinement. For ex-
ample, user profile information in the MPP
can help determine the quality attributes re-
quired for the architectural design of the
products targeted for each market segment.
Also, the MPP can help the developer ex-
plore design alternatives for feature delivery
methods, the resolution of feature interac-
tion problems, and so on.

FORM product line engineering processes
are iterative, incremental, and repeat until a
design has enough details for implementation.

Initiating asset development 
Developing an MPP for a product line

initiates asset development; the MPP sets a
specific context for analyzing the product
line and exploring reuse. Products devel-
oped without considering how to market
them or what the users’ needs and capabili-
ties are cannot be sold. Functionality alone
does not sell. Products must be configurable
to meet user needs and capabilities.

How the MPP helps 
The first part of an MPP is a marketing

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 5 9

Design
object model

Deployment
architectureMPP

Product line
requirements analysis

COTS,
patterns

Feature
modeling

Conceptual
architecture

design
Architecture
refinement

Component
design

Design object
modeling

MPP
development

MPP
refinement

Product line assets

Process
architecture

Conceptual
architecture

Refined MPP

Product line asset development process

Feature
model

Feature
model

MPP

PL
req.

Feature
model

PL
req.

PL
req.

Conceptual
architecture

Data flow

Product development process 

Product requirement
analysis and

feature selection

Architecture
selection and

adaptation

Component
adaptation and
code generation Marketing and product plan 

Product line 
Requirements

MPP 
PL
Req.

Name Activity

Figure 1. The 
Feature-Oriented
Reuse Method 
product line 
engineering process.
The arrows show
dataflow (each 
activity’s use of 
work products).



plan, which includes a market analysis and a
strategy for realizing business opportunities
in that market (see Figure 2). For each mar-
ket segment, the analysis includes an assess-
ment of needs, potential users, cultural and
legal constraints, time to market, and price
range. The marketing strategy initially in-
cludes an outline of product delivery meth-
ods and other business considerations. 

Once we define the marketing plan, we
should identify the characteristics of prod-
ucts in the line in terms of features and de-
velop a plan to incorporate those features.
A product plan includes product features
and product feature delivery methods (see
the right half of Figure 2).

Product features are largely classified into
functional and nonfunctional features. Func-
tional features include services, which are of-
ten considered marketable units or units of
increment in a product line, and operations,
which are internal product functions that are
needed to provide services. For example, in
home integration systems, fire, intrusion,
and flood detection and control features are
functional features. Nonfunctional features
include end-user-visible application charac-
teristics that cannot be identified in terms of
services or operations, such as presentation,
capacity, usage, cost, and other quality at-
tributes. Safety, reliability, and scalability are
important quality attributes for a home inte-
gration system product line.

A product feature delivery method de-
fines how product features are sold or deliv-
ered to customers and users and how they

are installed and maintained. We can
prepackage some features in products as
standard items; others can be selected at ne-
gotiation time. Other features could be spe-
cific to a customer and built into a custom-
made product. 

Marketing and product planning: An example
Let’s say that a home integration system

company intends to become a major player
with two initial products: a low-end product
(LE-HIS) and a high-end product (HE-HIS).
This company’s key marketing strategy is to
allow budget-conscious customers to start
with a “small” system with a few features
and then grow to a bigger one by adding
new features instead of buying new prod-
ucts. Therefore, the product’s scalability is
the most difficult challenge for the engineers. 

Table 1 is an example of an MPP for such
a home integration system product line. The
market analysis identifies two user cate-
gories (office building and home users) and
two market segments (high-end and low-
end) along with their current needs and user
profiles. The user/maintainer profiles for
each market segment are 

� Low-end market (household uses): No
computer skill is assumed for the poten-
tial users, and home integration system
software should run on the PCs they al-
ready have. 

� High-end market (office building uses):
Dedicated engineers with computer sci-
ence background are available for main-
tenance. The computing environment is
distributed over a network, and main-
tainers can access the system remotely. 

The MPP must also identify each coun-
try’s laws and cultural traits. Emergency
codes for each type of incident (such as fire,
flood, or intrusion) could vary from coun-
try to country, as could safety and reliabil-
ity requirements. 

Because the HE-HIS has many customer-
specific requirements, the designers would
choose the feature selection method (see Table
1) to adapt and integrate features at product
delivery time. For the LE-HIS, they would use
the prepackaged method (see Table 1) com-
bined with a user-friendly interface for users
who do not have any computer knowledge. 

The designers must refine product delivery

6 0 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

Product plan
(engineering concerns)

Marketing plan
(business concerns)

Market analysis Product features

Marketing strategy

Market segment
    • Needs assessment
    • User profile
    • Cultural and legal constraints
Business opportunities
    • Time to market
    • Price range

Product delivery methods
Other business considerations

Product functional features
    • Feature lists
    • Feature description
Quality attributes
    • Usability, scalability, and so on

Feature coverage
Feature binding time
Feature binding techniques

Product feature
delivery methods

Marketing and product plan

Figure 2. The 
elements of a 
marketing and 
product plan.



methods into product feature delivery meth-
ods—what features are allowed (feature cov-
erage), when they are incorporated (product
build time, product delivery or installation
time, or runtime), and how that incorpora-
tion is made (framework, template, load
table, plug-ins, and so on).5,9,10 For example,
the LE-HIS has a closed set of features, so
feature binding occurs at the product build
time. For the HE-HIS, however, customers
can select any feature from a predefined list,
so feature binding occurs at product delivery
time, perhaps by using a load table that con-
tains parameter values for instantiation.

FORM with MPP
The FORM includes the MPP to bring ef-

ficiency into product line asset development.
(Figure 3 shows an overview of the concept.)

Feature modeling and requirements analysis 
Because a product line’s MPP sets a spe-

cific context for a product line analysis, the
analyst can perform that analysis effectively
and efficiently. As we mentioned earlier,
product features identified in the MPP are
organized into an initial feature model,
which is then refined by incorporating oper-
ating environment, domain-specific technol-
ogy, and implementation technique features.
When incorporating these features, analysts
must investigate potential environmental
and technological changes (see Figure 4).11

Product line requirements analysis cap-
tures the necessary functionalities in a set of
models such as a use case model, an object
model, and so on.7 Depending on the product
line’s domain, other models may be included.
Based on this information, the product line
component design provides realizations of
common functions that an organization can
use across products. (The complete set of
models of the HIS example is not presented in
this article because of space limitations.)

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 6 1

Table 1
A marketing and product plan example for a home integration system product line

Office building (high-end product) Household (low-end product)

User/maintainer profile Dedicated engineers with computer science backgrounds No computer knowledge is assumed
Feature delivery method Feature selection from a predefined set of features (feature selection method) Prepackaged method
Legal constraints Emergency control services must conform to each country’s codes Emergency control services must conform 

to each country’s codes
Product features Fire, intrusion, flood, security, and other customer-specific features Fire, intrusion, flood
Quality attributes Safety, reliability, scalability Safety, reliability, scalability, usability
Product feature binding time Product delivery time Product build time

Collaboration
through MPP

Market
information

Key driver

Component design
for feature

binding
time variation

Feature
identification and

organization

Feature
interaction

policy

Quality
attributes

Feature
delivery
methods

User
profile

Product line assets

Engineering concernsBusiness concerns

Market analysis

Marketing strategy

Product functional
and nonfunctional

features

Product feature 
delivery methods

Feature model

Behavior
specification
(Statechart)

Architecture
design and
evaluation

User interface and
installer design

Marketing and product plan
Fire Detection

Fire Detection

Fire Detection

Figure 3. Product line
asset development
using a marketing
and product plan as
a key driver.



Feature interaction problems significantly
affect the way components are designed and
integrated. They can also affect how prod-
ucts are sold and delivered to customers. Sup-
pose a product line has a large set of features
from which customers can select. In this case,
analyzing feature interactions for all possible
feature combinations and having the compo-
nents ready for them is probably too difficult.
Analyzing feature interactions for each cus-
tomer selection and handling the problem on
a per-customer basis might be more cost-ef-
fective. The organization should use this in-
formation in designing components, and the
MPP marketing strategy should reflect it.

Suppose, for example, a flood control
feature, which shuts off the water main to
the home during a flood, is added to the HIS
along with the fire control feature, which
turns sprinklers on during a fire. One possi-
ble scenario could see sprinklers turning on
during a fire and flooding the basement be-
fore the fire is under control. This would
trigger the flood control feature to shut off
the home’s water main, rendering the sprin-
klers useless. Thus, when features are added

or integrated, the designer must analyze all
possible interactions during product line re-
quirements analysis and design the system
so that no undesirable interactions occur.

Figure 5 describes policies for handling
LE-HIS feature interactions using the State-
chart technique. The nested structure of
states represents the priority among events,
the deepest state having the lowest priority.
Notice that the event-monitoring features
are independently additive, and the associ-
ated activities perform concurrently. Event
handling is not independently additive, so
the designer should analyze interactions
among features and devise and enforce an
interaction resolution policy. 

Once the analyst refines the feature model
and develops the product line requirement
models, he or she can use this information to
refine the MPP, as Figure 1 describes. Because
the initial MPP contains delivery methods only
for functional and nonfunctional features, the
designer should develop product feature deliv-
ery methods for design features, such as oper-
ational environment and implementation tech-
nique features, during refinement.

6 2 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

Detection

FloodFire

Monitor/control
Services

. . .

Administration

Direct

Quality
attributes

Usability

Scalability

Reliability

Scheduled

Event-
based

Standard Advanced. . .
Detection Action Detection ActionAction

HMI IntrusionSecurity

Motion Smoke Moisture

Alarm
Message

Door
operation

Safety

. . .

HISCapability
layer

Periodic One-time
Gas. . . Pumping. . .

Water
main

Operating
environment
layer

Optional feature
Alternative feature

Telephone

Monitoring and detecting Responding
strategy

Discrete
value

Continuous
value Sequential Priority

Connection

TCP UDP

Internet

Composition rules
Water requires Sprinkler. Flood requires Moisture sensor.
Pumping requires Sump pump. Message requires Communication.

Domain
technology
layer

Implementation
technique
layer

Communication

Composed-of relationship
Generalization relationship
Implemented-by relationship

Redundancy control

Active Standby

Motion
sensor

Smoke
sensor

Moisture
sensor

Detection
devices

. . .
Sprinkler

Sump 
pump

Action
devices

. . .

Water
VoiceData

Figure 4. A feature
model of the home
integration system
product line.



Conceptual architecture design and 
architecture refinement

In the FORM, architecture design starts
with identifying high-level conceptual com-
ponents and specifying data and control de-
pendencies among them. The MPP is a key
design driver. For example, the conceptual
architecture for LE-HIS (see the conceptual
architecture in Figure 6) consists of three
major components (HIS Control, Standby
HIS Control, and External Interface compo-
nents); the Standby HIS Control component
is added to meet the legal constraints on re-
liability by increasing the mean time be-
tween failures. Standby HIS Control is acti-
vated when HIS Control fails to send the
Heartbeat data, thus making the system
fault-tolerant. The External Interface com-
ponent is for external device scalability. It
encapsulates the information on external
devices and provides a common interface to
HIS Control and Standby HIS Control. 

The next step is to refine the conceptual ar-
chitecture into process and deployment archi-
tectures. The upper portion of Figure 6 shows
the process and deployment architecture for

the conceptual architecture’s HIS Control
component. (The processes are allocated to
one network node.) During refinement, we
use the quality attributes from the MPP for
architectural style selection and evaluation.12

For example, we select the Independent Com-
ponent architectural style12 and design the
human–machine interface (HMI) process to
configure the HIS Configuration and Status
information-hiding module so that we can
add new external devices easily.

Component design 
Next, we refine the architectural compo-

nents into concrete components. The prod-
uct component design consists of specifica-
tions of components and relationships
among them. Figure 7 shows a UML repre-
sentation of the component specification of
the EventDNMDriver component and rela-
tionships with other components. 

For component design, designers should
take the product feature delivery methods in the
MPP into consideration. For example, the
FORM’s macro language ($IF(;$Flood)
[...]) in the component specification of the

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 6 3

Figure 5. Global 
control behavior of
the low-end home 
integration system.
The left side of the
diagram shows
event-monitoring 
activities being 
executed 
concurrently, and 
the right shows
event-handling 
activities and 
priorities among
them.

No event

Intrusion/set off alarm,
send message to owner
and police, lock doors

Door event
handling

Fire Detection

Smoke level > ?upper smoke level/fire

Smoke level < ?lower smoke level/extinguished

Fire detection

No motion/intrusion resolved

Intrusion detection

Motion/intrusion

Fire Detection

Scheduled time/door event

Scheduled event
detection

Fire Detection

Moisture/flood

No moisture/flood under control

Flood detection

Door event

No flood event

Flood event handling

Flood/
shut off
water 
main

Flood under control/
open water main

Intrusion event
handling

Intrusion resolved/
turn alarm off

Fire/turn sprinklers on,
set off alarm, send
message to owner
and fire station,
unlock doors,
open water main

Extinguished/shut off 
sprinklers, turn alarm 
off, timed event
(back to normal,
?time)

Fire event handling

Restoration
from fire event

Back to 
normal 

Door
event 

handled



6 4 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

Figure 6. 
Architecture design
and refinement for
the low-end home 
integration system. Event and action

definition

HIS configuration
and status

Event
definition

HIS configuration
and statusHIS

configuration
and status

Sprinkler control

Action request

Process and deployment architecture

Conceptual architecture

HMI
command

Event
and action

data

HIS configuration and status

Event
report

HMI
request

HMI
command Moisture

sensor
input

HMI
request

HMI
request

External
device

command

Action
definition

External
device status

Heart
beat

Responding

Event detection
and monitoring

HMI

External interface

HMI
command

Door control

Water main control

Sump pump control

External
device status

External
device
status

External
device

command

Communication data

Standby
HIS control

HIS control

Heart-
beat

Motion
sensor
input

Smoke
sensor
input

Process Informationhiding module

Loosely coupled
message queue

Message
without reply

Data access

Conceptual component Data flow Control flow

Architecture
refinement

Figure 7. Component
specification for the
EventDNMDriver.

Smoke : Integer
opFlag : Boolean

GetSmoke(): Integer
isOperate(): Boolean

SmokeSensor

calls

callsuses

1..*

1 1

1

1

1

Component
  EventDNMDriver<;$Flood, ;$Intrusion,
  Implements Flood,Intrusion, Fire
  Require Moisture, SumpPump, Alarm,
{
…
  DetectNMonitoring(){
  …
    $IF(;$Flood)[ 
    If ( (moistureSensor->GetMoisture(
      eventGeneration->GenerateEvent(F1.
      ...
    ]
…
}

FORM component specification
for macro processing

FireEventDetection::FireDetection()
pre:
smokeSensor.opFlag = true
post:
if smokeSensor->GetSmoke() >=
   getEventDefinition->GetDefinition(Fire)
  then self.isFire = true
  else self.isFire = false
endif

UML/OCL specification

EventDNMDriver

Fire: Event
isFire: Boolean

FireDetection():Boolean

FireEventDetection

EventDefinition: Event

ChangeDefinition(e:Event, v:Integer)
GetDefinition(e:Event):Integer

GetEventDefinition

Detection():Boolean

Detection

GenerateEvent(e:Event)

EventGeneration

DetectNMonitoring()



EventDNMDriver in Figure 7 supports the
prepackaged LE-HIS feature delivery method.
When we select the Flood feature (in Figure 4)
as a prepackaged feature, code segments re-
lated to it are incorporated into the product at
build time. As another example, we refine the
HMI process in Figure 6 into a framework,
which defines a generic structure for imple-
menting an Advanced HMI feature for HE-
HIS and a Standard HMI feature for LE-HIS.
At product build time, product-specific com-
ponents for the Advanced HMI and Standard
HMI features (in Figure 4) are instantiated
from the framework. 

Depending on the nature of extensions re-
quired for product-specific features, we can
use techniques such as code generation, en-
capsulation, parameterization, frameworks,
templates, and so on. For example, we could
specify the Event Generation component in
Figure 7 that encapsulates a policy for han-
dling feature interactions by using a formal
specification technique (for example, the
Statechart specification in Figure 5). When-
ever we add new features, we modify and
test the feature interaction specification for
correctness, and users can generate new up-
dated program code for the component. 

T he FORM’s connection to the MPPforces organizations to make mar-keting more “product aware” and to
think about how to package, deliver, and
maintain features, who will perform these
activities, and what the pricing implications
are with various alternative approaches.
The customer profile and other useful infor-
mation go directly into product design. This
marketing-oriented perspective can uncover
critical quality attributes required for prod-
uct line architecture and component design.
By tightly coupling marketing with asset de-
velopment, we can develop product line as-
sets that will support business goals and sat-
isfy customer needs. We are planning to
apply our method to several product lines,
including process computer systems for steel
manufacturing factories and embedded sys-
tems for electrical appliances. Also, we are
formalizing our method and extending our
tool to support a marketing and product
plan.

References
1. P. Clements and L. Northrop, Software Product Lines:

Practices and Patterns, Addison Wesley Longman,
Reading, Mass., 2001. 

2. D.M. Weiss and C.T.R. Lai, Software Product-Line Engi-
neering: A Family-Based Software Development Process,
Addison Wesley Longman, Reading, Mass., 1999. 

3. J. Bosch, Design and Use of Software Architectures:
Adopting and Evolving a Product-Line Approach, Ad-
dison Wesley Longman, Reading, Mass., 2000. 

4. K.C. Kang et al., “Feature Oriented Product Line Soft-
ware Engineering: Principles and Guidelines,” to be pub-
lished in Domain Oriented Systems Development: Prac-
tices and Perspectives, Taylor and Francis, London, 2002.

5. K. Kang et al., Feature-Oriented Domain Analysis
(FODA) Feasibility Study, tech. report CMU/SEI-90-
TR-21, Software Eng. Inst., Carnegie Mellon Univ.,
Pittsburgh, 1990.

6. K. Kang et al., “Using a Marketing and Product Plan as
a Key Design Driver for Product Line Asset Develop-
ment,” G. Chastek, ed., Proc. 2nd Software Product
Line Conf., Springer Lecture Notes in Computer Sci-
ence, vol. 2379, Heidelberg, Germany, 2002. 

7. G. Chastek et al., Product Line Analysis: A Practical In-
troduction, tech. report CMU/SEI-2001-TR-001, Soft-
ware Eng. Inst., Carnegie Mellon Univ., Pittsburgh, 2001. 

8. E. Gamma et al., Design Patterns: Elements of Reusable
Object-Oriented Software, Addison Wesley Longman,
Reading, Mass., 1995.

9. K. Czarnecki and U. Eisenecker, Generative Program-
ming: Methods, Tools, and Applications, Addison Wes-
ley Longman, Reading, Mass., 2000. 

10. M. Simos et al., Software Technology for Adaptable Re-
liable Systems (STARS) Organization Domain Modeling
(ODM) Guidebook Version 2.0, STARS-VC-
A025/001/00, Lockheed Martin Tactical Defense Sys-
tems, Manassas, Va., 1996.

11. K. Lee, K. Kang, and J. Lee, “Concepts and Guidelines
of Feature Modeling for Product Line Software Engi-
neering,” C. Gacek, ed., Proc. 7th Int’l Conf. Software
Reuse, Springer Lecture Notes in Computer Science,
vol. 2319, Heidelberg, Germany, 2002. 

12. L. Bass, P. Clements, and R. Kazman, Software Archi-
tecture in Practice, Addison Wesley Longman, Reading,
Mass., 1998.

For more information on this or any other computing topic, please visit our
Digital Library at http://computer.org/publications/dlib.

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 6 5

About the Authors

Kyo C. Kang is a professor at the Pohang University of Science and Technology. His re-
search interests include software reuse, real-time embedded systems, and automatic code gen-
eration. He received a PhD in industrial engineering from the University of Michigan. Contact
him at the Dept. of Computer Science and Eng., Pohang Univ. of Science and Technology, San
31 Hyoja-Dong, Pohang, 790-784, Korea; kck@postech.ac.kr.

Jaejoon Lee is a PhD candidate at the Pohang University of Science and Technology,
where he received an MS in computer and communications engineering. He received a BS in
mathematics from Sogang University. Contact him at the Dept. of Computer Science and Eng.,
Pohang Univ. of Science and Technology, San 31 Hyoja-Dong, Pohang, 790-784, Korea; 
gibman@postech.ac.kr.

Patrick Donohoe is a senior member of the technical staff at the Software Engineering
Institute of Carnegie Mellon University. His research interests are software product lines and
analysis modeling. He received a BA in mathematics and an MS in computer science from Trin-
ity College, Dublin, Ireland. Contact him at the Software Eng. Inst., Carnegie Mellon Univ., Pitts-
burgh, PA 15213; pd@sei.cmu.edu.



6 6 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2 0 7 4 0 - 7 4 5 9 / 0 2 / $ 1 7 . 0 0  ©  2 0 0 2  I E E E

efficiency, while security systems protect the
car from unauthorized manipulation. 

An automotive system typically consists of
dedicated processors, software, and inter-
faces that let the system measure, manipu-
late, and otherwise interact with its external
environment. Designers optimize such sys-
tems to reflect specific application character-
istics. Apart from a system’s desired func-
tionality, automotive system designers must
consider many possibly conflicting qualities
and constraints. Developing an automotive
system can thus involve hundreds or thou-
sands of variants, adding to the existing engi-
neering complexity. Whereas variability has
typically been addressed on a case-by-case
basis in late development phases, designers
now need a managed, systematic approach to
the ever-increasing number of variants. 

Product lines provide this systematic ap-
proach, along with a special focus on vari-

ability among related products. As we dis-
cuss here, systematic planning and continu-
ous variability management is a prerequisite
for effective product lines. We’ve developed
an approach to modeling and utilizing vari-
ability to support the efficient creation of
product variants. Our approach is based on
experiences with several industrial case
studies at Bosch. Before describing them, we
explain how product line development
meets the major design challenges in the au-
tomotive system domain.

Product line development
Automotive systems typically have thou-

sands of requirements, but some are espe-
cially important. Many automotive systems
are real-time systems with strict temporal
requirements that result from the internal
control loops. Thus, a computation’s cor-
rectness depends, in part, on its timeliness.

focus
Modeling and Using
Product Line Variability in
Automotive Systems

Steffen Thiel and Andreas Hein, Robert Bosch Corporation

Product lines offer a
promising approach
to automotive system
development
because they permit
strategic reuse 
of core assets.
However, to gain
significant
economies of scope,
variability must 
be systematically
considered
throughout the
development
process.

A
utomotive systems provide a broad spectrum of services that fun-
damentally improve passenger comfort, safety, economy, and se-
curity. Parking assistance or adaptive cruise control systems make
it easier to operate a car in various driving situations, thus reduc-

ing drivers’ workload and increasing their comfort. Safety-related systems,
such as automatic stability or airbag control, help drivers avoid or reduce the
impact of accidents. Fuel economy systems lower emissions and increase fuel 

initiating software product lines



Furthermore, designers must guarantee the
safety and reliability of the automotive sys-
tem software and embedded computer, even
under harsh conditions including excessive
heat or cold, vibration, shock, power supply
fluctuations, water, and corrosion. Another
essential quality of automotive systems is
their availability, or readiness for use. Main-
tainability might also be important. Legacy
software, for example, might have to run on
replacement hardware. Finally, security is
critical: Developers must be able to guaran-
tee that the system software cannot be eas-
ily manipulated.

Although many of these challenges in-
volve comprehensive research and analysis,
most have been solved by technical means.
However, providing such solutions in a way
that is both cost-effective and allows a short
time-to-market remains challenging for both
traditional and platform-based development. 

Traditional development
Today’s automobiles use many automo-

tive systems. Luxury cars, for example, can
include more than 80 electronic control
units that operate as single, partly net-
worked systems. In these systems, the soft-
ware portion is often highly adapted to the
underlying hardware and implements fixed,
very specific functions (such as adjusting
seats or lifting windows). 

Although companies might have consid-
ered the development of unifunctional entities
cost-effective in the past, it is hardly so when
we consider the total functionality of the car’s
automotive systems. The disproportionate
hardware costs, along with excessive software
development and maintenance costs for the
various automotive systems, make the conven-
tional “one at a time” approach singularly un-
attractive. Moreover, the restricted reusability
that results from binding software functional-
ity to dedicated hardware—as well as the ad-
ditional packaging, power consumption, and
electromagnetic interference—now make it
difficult to profitably engineer automotive sys-
tems in the traditional way. 

Platform-based development
To overcome these problems, the industry

recently began integrating automotive func-
tions on powerful multipurpose platforms
that replace mechanical and electronic com-
ponents with intelligent software solutions.

For example, companies now use a common
platform for infotainment systems (includ-
ing, for example, a radio, CD player, and
navigation system1) and safety systems (in-
cluding parking assistance and precrash de-
tection2). Although adopting a platform-ori-
ented development permits additional
services, more flexibility, and shared hard-
ware use, cost-effectiveness and time-to-
market have still not been addressed. Conse-
quently, the effort required to develop more
complex platform software is not fully com-
pensated by the hardware cost savings.

The product line approach
Despite their high volume, automotive

systems nonetheless have numerous varia-
tions due to differences among customers,
price, and technology. Therefore, a strategic
reuse approach that guarantees economies of
scope is indispensable. We can achieve this
strategic reuse by adopting a product line ap-
proach to platform-based development.

A software product line is a set of software-
intensive products that share a common, man-
aged feature set that satisfies the specific needs
of a particular market segment. Product line
development proceeds from a common set of
core assets in a prescribed way.3

Economies of scope imply a mass-cus-
tomization ability,4 which in turn requires 
a systematic consideration of variability
throughout product line development. Para-
doxically, the latter is often dismissed as sec-
ondary. Nonetheless, as we now describe,
this variability is crucial to achieving effec-
tive product lines.

Modeling product line variability
Developing product line products differs

from developing single products in that
variability is an inherent part of the model-
ing. This does not mean that common soft-
ware engineering practices are obsolete.
Rather, we must both extend these practices
and develop new ones.5

Variability affects all product line artifacts,
from requirements to code. Clearly, we need
specific solutions to support the specific cus-
tomer needs that motivated the variation.
However, in current practice, designers often
give variability incidental treatment. They
typically introduce it during late design or im-
plementation and express it, for example,
through myriad compiler switches. Moreover,

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 6 7

Developing
product line

products differs
from developing
single products

in that variability
is an inherent

part of the
modeling.



designers often introduce a variation point
based on heuristics or expert knowledge. The
documentation of variable requirements ad-
dressed by a variation point is often implicit,
making the variation’s rationale hard to iden-
tify. With such an approach, product cus-
tomization—and especially the integration of
new features—is complex and error-prone.
Therefore, handling variability late in devel-
opment eliminates the company’s ability to
achieve significant economies of scope.

Our approach addresses these problems by
systematically and continuously incorporating
variability throughout product line engineer-
ing. We must introduce and refine variability

during core asset development and reflect vari-
ability in the production artifacts.6 Figure 1
shows a representative set of processes and ar-
tifacts; a more comprehensive overview is
available in the literature.3

Feature model
The feature model is an essential result of

product line requirements analysis.7–10 It
captures product line members’ functional
and nonfunctional capabilities, as well as
their commonalities and variabilities. It also
provides various stakeholders with a valu-
able view of the product line. For example,
customers can use the feature model to gain
an understanding of the product line’s func-
tionality, while system architects and prod-
uct engineers use it to drive the development
of product variants.

Figure 2 shows a simplified example of a
feature model for a car periphery supervision
product line. CPS systems provide passenger
comfort and safety functions based on sensors
that detect objects in the vehicle environment.

The feature model structures CPS prod-
uct line capabilities into a tree that shows
designers which variants to create and a
constraint network that coordinates their
combination. For clarity, we’ve omitted the
constraints network in Figure 2, which
shows only the tree structure:

6 8 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

Core asset development

Product line
analysis

Product line
architecting

Product line
design &

implementation

Product line Components and
source code

Product line
feature model

maps_to

us
ed

_f
or

maps_to

us
ed

_f
or

produces produces produces

architecture

Figure 1. Managing variability throughout core asset development.
The figure shows a representative set of processes (light green
boxes) and artifacts (dark green boxes).

F1
Application

F2
Sensor equipment

F3
Parking support

F7
Distance indication

F13
Front

F14
Rear

F8
Steering assistance

F9
Low-end

F10
High-end

F11
Low-end

F12
High-end

F4
Precrash detection

F5
Front

F6
Rear

Car periphery supervision systems

Figure 2. A feature model for a product line that provides car periphery supervision, which uses sensors
to detect objects in the vehicle’s environment. “F” indicates a feature. Filled arches indicate or-features
and empty arches indicate alternative features; filled circles indicate mandatory features and empty 
circles indicate optional features.10



� The application branch is concerned with
the intended CPS system functionality.

� The sensor equipment branch shows the
hardware variants required to realize
the sensor platform on which the func-
tionality is based.

As Figure 2 illustrates, a CPS system in-
cludes at least one of two applications:
parking support and precrash detection.
Parking support basically consists of rear-
distance indication; we can enhance it with
front-distance indication and steering assis-
tance. We can define sensor equipment for
the car’s front or rear, applying either a low-
or high-end variant for each.

Product line architecture
Architecture is the first design artifact that

places requirements into the solution space.
Designers typically organize the architecture
description into multiple architectural views.
Each view represents the target system from
a particular perspective while addressing one
or more stakeholder concerns. 

With a product line, the architecture must
also capture design element variability.3,6,11

Architectural variability represents alternative
design options that could not be bound dur-
ing architectural modeling. Designers often
express this variability as a set of architectural
variation points that show (part of) the archi-
tectural solution to variable features.

A feature model does not, however, im-
ply a specific design; rather, it hints about
where designers must pay special attention
to structuring an architecture—for example,
with respect to configurability.11 Neverthe-
less, configurability is unlikely to be the
only attribute a designer must consider dur-
ing architecture design. In the automotive
context, performance, safety, and reliability
also play important roles, as mentioned ear-
lier. The final architecture must consider all
functional and nonfunctional requirements,
including qualities and design constraints.

Figure 3a and b shows the variability in
the logical and the physical views of the CPS
product line architecture. At the architec-
tural level, we introduce variation points to
satisfy the variability among the require-
ments in Figure 2. We characterize each
variation point by specifying how and when
a variation point applies. As the solid lines
between them show, variation points might
depend on each other to define consistent
component configurations.

The logical view contains four variation
points. As the arrows indicate, variation point
1 affects a logical component, steering assis-
tance, and two component groups. Variation
points 2, 3, and 4 affect only individual logi-
cal components (distance indication, sensor
control, and measurement coordination, re-
spectively). Additionally, there are dependen-
cies between variation points 1 and 3, 1 and

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 6 9

VP1

Precrash
detection

Steering
assistance

Distance
indication

Situation
evaluation VP2

VP3 VP4

Measurement

Component groups
Interaction
Dependency

coordinationSensor control

VP5Application

Indication
range

Sensor
mode

Supervision
range

Situation
evaluation

Smart Sensor
(mid front)

Smart Sensor
(rear left)

Smart Sensor
(rear right)

VP6

Sensor type

F 1 F7 F 2 F5 F6

(a) (b)

Priority
management

Figure 3. Variability in the (a) logical architecture and the (b) physical architecture. The variation
points satisfy the variability among the requirements in Figure 2. “F” indicates a feature and “VP” a
variation point.



4, and 2 and 5. Variation point 2 parameter-
izes the indication range software, whereas
variation points 5 (supervision range) and 6
(sensor type) map the corresponding elements
to the hardware platform. Thus, variation
points 5 and 6 are part of the CPS’s physical
view, describing the sensor equipment that the
specified functionality requires.

Variability also affects other architectural
views, including the process and deploy-
ment views, which we discuss elsewhere.11

Other work products
The feature model and architecture docu-

mentation represent only a portion of the
work products required for product line de-
velopment. The feature model represents
product line members’ particular capabili-
ties, while the product line architecture of-
fers the overall structure for realizing these
capabilities. To create product line members,
designers must consistently refine design so-
lutions for realizing both the common and
variable features during detailed design and
implementation.

Not all variable features will inevitably
affect the architecture’s overall organization.
Rather, designers encapsulate some variabil-
ity from the architectural viewpoint, and it
first appears at a more detailed level. In au-
tomotive systems in particular, there are

problems (and variations among them) that
designers can adequately address through
component design or code constructs. Ex-
amples include algorithmic conversions of
feedback control activities, software code
encryption to prevent unauthorized tuning,
or runtime data and instruction compression
for optimizing memory efficiency.

As designers refine the architecture dur-
ing design and implementation, the number
of variation points usually increases because
the mechanisms must ultimately be realized
through constructs at a lower abstraction
level. Nevertheless, the concrete solutions
we use to implement a variation point must
conform to the conventions defined in the
architecture. To control this process, estab-
lishing adequate traceability links—which
reveal the rationale behind a code-level vari-
ation—is vital.

Using product line variability
As we mentioned earlier, work products

created during product line development do
not exist in isolation. Rather, they relate to
each other as designers refine and realize re-
quirements stepwise from analysis to code.
Stepwise refinement includes the variability
identified first in the feature model, then im-
plemented in architectural variation points.
Designers should explicitly map features to
the corresponding architectural variation
points. In principle, this mapping shows
how the architecture’s variability mecha-
nisms contribute to the realization of the fea-
ture model’s variability.

In Figure 3, we denote this mapping us-
ing feature identifiers attached to the archi-
tectural variation points. For example, the
options associated with the application fea-
ture (F1) affect the architectural variation
point 1. This point is associated with the
corresponding logical components in the
product line architecture. Variation points 3
and 4 are only indirectly affected by feature
variants (through their relationship to vari-
ation point 1). Variation point 6 depends on
both the feature specification of the front
(F5) and rear (F6) sensor equipment. This
example raises two major points:

� The correspondence between features
and architectural variation points is
rarely 1:1 (F5 and F6 both map to vari-
ation point 6, for example).

7 0 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

Product development

Product line
architecture

Product line
feature model

Feature
configuration

Architecture
configuration

Architecture
adaptation

Derived
architecture

Product
architecture

used_for

produces

used_for

produces

used_for

produces

maps_to

map_to

used_for

Product features

Figure 4. Interaction
between the feature
and architecture 
models to utilize 
variability. Light
green boxes 
represent processes;
dark green boxes 
represent artifacts.



� The architectural variation points do not
introduce new variability; rather, they
realize the feature model’s variability.
Variation points 3 and 4 do not contra-
dict this statement; they simply support
variation point 1 and F1, respectively.

The traces between the features and the
architecture not only help stakeholders un-
derstand how designers have realized prod-
uct line variability, but also can be effectively
used for product derivation. We therefore
propose an extension to the concept of fea-
ture modeling to support the development of
product line members, starting from their
feature specifications.8,12 The basic idea is to
choose among the different feature options
and resolve the variability according to cus-
tomer needs.

For example, we might specify a low-end
parking support that displays distances to
rear obstacles by selecting the features F3
and F11 (see Figure 2). Such selections must
be consistent with the relationships among
features. Following feature selection, a
product developer can use a configuration
tool to propagate the selections to the archi-
tecture. Figure 4 shows how the feature and
architecture models work together.

The product line’s feature model serves
as a starting point for deriving a product. In
the feature configuration process, we use
the feature model to specify products in
terms of features. Then, in the architecture
configuration process, we use the specified
product features to bind the corresponding

variation points in the product line architec-
ture by using the traceability between the
product line feature model and architecture.
The result is a derived architecture that con-
forms to the product features. The architec-
ture also serves as the basis for potential
customizations in the architecture-adapta-
tion process, which yields the actual prod-
uct architecture. 

To support product architecture mainte-
nance, product developers should preserve
the traces between the derived architecture
and the corresponding product features. The
reason for this is that product developers
eventually must adapt an architecture to add
features specific to only a few products. The
decision about what is built “inside” and
“outside” a product line is based on business
considerations that shape the product line’s
scope. In practice, new features that are not
directly supported by the current product
line architecture still must be included to sat-
isfy all customer requirements. However,
slight adaptations are acceptable as long as
those features require only small, local
changes to the architecture and don’t nega-
tively affect the overall architectural quality.
Generally, management must make an ex-
plicit decision about whether to include such
“extra features” at the product or product
line level.

Figure 5 shows the product features, the
corresponding variation points in the logical
view, and the derived physical architecture.
Because we selected F3 and F11, we must se-
lect other features as well. F7 and F14, for

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 7 1

InteractionComponent groups

(a) (b) (c)

Dependency

VP1

Distance
indication

VP3 VP4

Measurement
coordinationSensor control

Application

Sensor
mode

Priority
management

Situation
evaluation

Smart sensor
(rear left)

Smart sensor
(rear right)

F7
Distance

indication

F14
Rear

F6
Rear

F2
Sensor

equipment

F1
Application

F3
Parking
support

F11
Low-end

Figure 5. CPS 
parking support 
variant, including 
(a) product features,
(b) the related 
variation points in 
a portion of the 
logical view, and 
(c) a portion of the
derived physical
view, which contains
no variability and 
can thus be input 
directly into the 
product architecture. 



example, are mandatory parts in every park-
ing-support application (see Figure 2, for ex-
ample). The derived logical view consistently
excludes steering assistance and precrash de-
tection but still contains variation points
that must be resolved as part of the product
architecture design. The derived physical
view contains no variability after resolving
variation points 5 and 6 according to the
feature selections, so we can use it as direct
input to the product architecture.

W e are currently working on con-cepts and techniques to extendand improve variability modeling
and management for industrial applications.
Our research areas include representation is-
sues and modeling and traceability guide-
lines for different development phases, as
well as tools that exploit variation points to
support efficient product creation. In addi-
tion to these topics, we are working to refine
our system-engineering processes to make
product line development more effective.

References
1. P. Motz et al., “Mobile Media Open Computing Plat-

form,” Proc. In-Vehicle Software 2001 (SP-1587), SAE
2001 World Congress, Soc. of Automotive Engineers,
Warrendale, Pa., 2001, pp. 135–153.

2. S. Thiel et al., “A Case Study in Applying a Product
Line Approach for Car Periphery Supervision Systems,”
Proc. In-Vehicle Software 2001 (SP-1587), SAE 2001
World Congress, Soc. of Automotive Engineers, War-
rendale, Pa., 2001, pp. 43–55. 

3. P. Clements and L. Northrop, Software Product Lines:
Practices and Patterns, Addison-Wesley, Boston, 2001.

4. C.W. Krueger, “Easing the Transition to Software Mass
Customization,” Software Product Family Engineering,
F. van der Linden, ed., Lecture Notes in Computer Sci-
ence no. 2290, Springer-Verlag, Berlin, 2002, pp.
282–293.

5. S. Thiel, “On the Definition of a Framework for an Ar-
chitecting Process Supporting Product Family Develop-
ment,” Software Product Family Engineering, F. van der
Linden, ed., Lecture Notes in Computer Science no.
2290, Springer-Verlag, Berlin, 2002, pp. 125–142. 

6. F. Bachmann and L. Bass, “Managing Variability in
Software Architectures,” Proc. Symp. Software
Reusability: Putting Software Reuse in Context, ACM
Press, New York, 2001, pp. 126–132.

7. G. Chastek et al., Product Line Analysis: A Practical
Introduction, tech. report CMU/SEI-2001-TR-001,
Software Eng. Inst., Carnegie Mellon Univ., Pittsburgh,
2001.

8. A. Hein, J. MacGregor, and S. Thiel, Configuring Soft-
ware Product Line Features, tech. report 2001-14,
Dept. of Computer Science, Univ. of Karlsruhe, Karl-
sruhe, Germany, 2001, pp. 67–69.

9. K.C. Kang et al., Feature-Oriented Domain Analysis
(FODA) Feasibility Study, tech. report CMU/SEI-90-
TR-21, Software Eng. Inst., Carnegie Mellon Univ.,
Pittsburgh, 1990.

10. K. Czarnecki and U.W. Eisenecker, Generative Pro-
gramming: Methods, Tools, and Applications, Addison-
Wesley, Boston, 2000.

11. S. Thiel and A. Hein, “Systematic Integration of Vari-
ability into Product Line Architecture Design,” to be
published in Proc. 2nd Software Product Line Conf.
(SPLC2), Springer-Verlag, Berlin, 2002.

12. A. Hein, M. Schlick, and R. Vinga-Martins, “Applying
Feature Models in Industrial Settings,” Software Prod-
uct Lines: Experience and Research Directions, P.
Donohoe, ed., Kluwer Academic Publishers, Boston,
2000, pp. 47–70.

For more information on this or any other computing topic, please visit our
Digital Library at http://computer.org/publications/dlib.

7 2 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

About the Authors

Steffen Thiel is project leader for product line improvements in the Software Technology De-
partment of Robert Bosch Corporate Research and Development in Frankfurt, Germany. At Bosch,
he was responsible for the European product line research project ESAPS and is now leading Bosch
activities for its successor, CAFÉ. Prior to his product line activities, he developed intelligent vehicle
information systems at Bosch. His research interests include requirements and feature analysis,
quality-driven architectural design, product derivation, and evolution. He received a diploma in com-
puter science from the Technical University of Darmstadt. He is a member of the IEEE Computer
Society. Contact him at Robert Bosch Corp., Corporate Research and Development, Software Tech-
nology, P.O. Box 94 03 50, D-60461, Frankfurt, Germany; steffen.thiel@de.bosch.com.

Andreas Hein is a member of the scientific staff at the Corporate R&D Department for
Software Technology at Robert Bosch Corporate Research and Development in Frankfurt, Ger-
many. He has worked on several European software product line projects, including PRAISE,
ESAPS, and CAFÉ. In addition to product lines, his research interests are in software engineer-
ing practices and configuration systems. He received a diploma in computer science from the
Technical University of Darmstadt. Contact him at Robert Bosch Corp., Corporate Research and
Development, Software Technology, P.O. Box 94 03 50, D-60461, Frankfurt, Germany; 
andreas.hein1@de.bosch.com.

Work products
created during

product line
development do

not exist in
isolation. 



focus

0 7 4 0 - 7 4 5 9 / 0 2 / $ 1 7 . 0 0  ©  2 0 0 2  I E E E J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 7 3

themselves: Satisfying a particular market
segment’s specific needs and operating in a
prescribed way require solid requirements
and operational management. A product
line organization must therefore be a com-
plete product creation and delivery entity
that collects and analyzes requirements, cre-
ates the products, delivers them to cus-
tomers or distributors, and supports them
after delivery. It functions under a manage-
ment that has full responsibility for main-
taining the core assets and creating and de-
livering software products.

At Nokia, we used a product line to de-
velop mobile browser products that let mo-
bile phone or personal digital assistant users
access services over wireless telecommuni-
cations networks. We developed the tech-
nology first for our own handsets and later
distributed it as a software product. We had
two reasons to initiate the product line.
First, we needed to serve an increasingly

heterogeneous customer base. Second, we
wanted to benefit from large-scale reuse.
Neither of these reasons alone would have
justified initiating a new product line. How-
ever, the product line approach provided us
with tools to achieve both of these goals and
was therefore well justified. Our experience
at Nokia can serve as a case study for other
organizations debating a similar transition. 

Mobile browsers and tools 
In 1999, we launched the Nokia Browsers

and Tools product line. The technology was
initially based on the Wireless Application
Protocol specification, which specifies,
among other things, mark-up and scripting
languages and a communication protocol.3

We started by developing a WAP browser
and toolkit (see Figure 1). We then extended
our product family to include three browser
products and a multimode toolkit product.
We named the generic version of the browser

Developing Mobile
Browsers in a Product Line

Ari Jaaksi, Nokia 

Developers at Nokia
recently initiated
and used a product
line to create and
deliver mobile
browser products.
They learned that, to
succeed, a software
product line must be
product and
application driven,
rather than reuse or
platform driven. 

A
software product line is a set of systems sharing a common, man-
aged suite of features that satisfy a particular market or mission’s
needs and that are developed in a prescribed way.1,2 A software
product line basically consists of a family of interrelated software

products—applications that use a pool of core assets, such as software com-
ponents, documents, processes, and tools. 

The organization developing a product line is inseparable from the systems

initiating software product lines



Nokia Mobile Browser. We offered it as a
software product to external customers
seeking a portable mobile browser, and we
delivered it as a source code product with a
reference implementation on Windows. The
Nokia operating system version of the
browser included Nokia-platform-specific
adaptations and interfaces. We delivered it
internally and ran it on Nokia’s proprietary
phone platforms. We tailored the Symbian
OS version of the browser for the Symbian
operating system with C++ wrappers and
Symbian extensions. We also delivered it as
a source code product. The Nokia Mobile
Internet Toolkit was a phone simulator cou-
pled with a development environment run-
ning on Windows platforms. We distributed
it over the www.nokia.com Web site for con-
tent developers. By the end of 2001, we had
several customers for all the embedded
browsers, and the toolkit had approximately
500,000 registered users.

We had many common requirements for
all the products. These included require-
ments for implementing the Extensible Hy-
pertext Markup Language (XHTML) with
Cascading Style Sheets and the Wireless
Markup Language 1.x browser, supporting
both languages natively.3,4 All products re-
quired connectivity through the specified
protocol, and we tested all of them for in-
teroperability with wireless gateways.

Several requirements varied from one
product to the next. A small phone, such as

the Nokia 6210, requires a compact C im-
plementation with small memory consump-
tion. A more advanced device, such as the
Nokia 7650, requires C++ interfaces, inte-
gration with various personal information
management applications, and other more
advanced features. Our external customers,
such as AOL, Samsung, and Symbian,
needed a compact implementation with no
dependencies on Nokia’s proprietary phone
platforms. The toolkit required accurate du-
plication of phone behavior on the Win-
dows platform, a separate content develop-
ment environment, and hooks to plug in to
various third-party components. 

In spite of their differences, all the prod-
ucts used a common product line core,
which included elements such as protocol
stacks, markup and scripting handling com-
ponents, and layout managers. We imple-
mented the core in C, and it consisted of ap-
proximately 300,000 lines of code. 

Developing the product line 
A product line must benefit customers by

helping the software organization build bet-
ter products. Therefore, we first concen-
trated on the specification and speedy deliv-
ery of individual products. We built the
product line only after our first product re-
leases, which helped us get the first products
out quickly.

As an example, we needed to get phone
simulators and authoring tools out to con-

7 4 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

Figure 1. (a) The
Nokia Mobile 
Internet Toolkit and
(b) an early browser
phone.

(a) (b)



tent developers before browser phones were
available. We implemented a browser simu-
lator from scratch, using Java for speedy de-
velopment instead of the existing C-based
browser components. In a later release, we
replaced the Java-based simulators with C-
based simulators that originated from the
product line. 

The origin of Nokia’s product line assets
In 1998, the US Nokia team started to

develop mobile browser modules such as a
script engine and WML markup handling
routines for the Nokia 7110, the first WAP
browser phone. There were no requirements
to make code available on any other plat-
form or to document or packetize it as a
software product. The group simply devel-
oped software components to a specific
hardware device.

We also started to develop the Nokia
WAP Toolkit—a WAP simulation and con-
tent development environment—which we
released on 17 December 1998, only four
months after the project’s initiation. The
product included full WML and WMLScript
development facilities with a WAP phone
simulation.

Simultaneously, another team developed
WAP gateway products, creating a client-side
protocol stack to test gateway protocols. The
development happened at Nokia Hungary,
with several components coming from other
Nokia groups. The protocol stack was not
tailored for small devices nor designed for
use as part of a software product.

A team in Denmark implemented and
adapted browser technology to specific Nokia
phone models. The team had another imple-
mentation of the WAP protocol stack running
in a phone that was small but designed to
work only on Nokia’s own platform.

Thus, we had many components avail-
able for the product line: several core
browser components, the WAP Toolkit de-
veloped as an authoring tool and simulator,
a WAP protocol implementation built as a
WAP test suite, and a Nokia platform-de-
pendent protocol stack developed to run
only in Nokia phones. We developed and
maintained all these components separately.
Clearly, it was time for a product line.

Incorporating existing components
In April 1999, we decided to integrate

available browser components, put the
browser on different Nokia phones, and of-
fer it to external customers such as device
manufacturers and telecom operators. This
was the first time Nokia licensed out its own
phone software—we had already distributed
the WAP Toolkit. Now that we needed to de-
velop two different products with a lot of
overlapping functionality, we decided to or-
ganize the common parts into a product line.
Thus began the Nokia Browsers and Tools
product line.

We selected the core browser compo-
nents and the test protocol stack to form the
initial product line. We first enhanced these
components to meet our key product re-
quirements of full WAP implementation,
portability, and product quality. To meet the
implementation requirement, we set up a
project to build missing functionality. We
also set up an interoperability test suite to
verify that we had implemented the stan-
dard as specified. To meet the portability re-
quirement, we removed all dependencies to
Nokia phone platforms and used only ANSI
C and a limited set of standard libraries. We
modified all components, especially the pro-
tocol stack, to be suitable for small portable
devices. Finally, we isolated platform-de-
pendent code and APIs into a portability
layer (see Figure 2). At this time, we kept
the toolkit separate and didn’t use common
software components in it. However, the
toolkit benefited from the product line’s re-
quirements, testing facilities, documenta-
tion, and software development processes.

We analyzed the two available stack im-
plementations: the generic test suite imple-
mentation and the Nokia platform-specific

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 7 5

Figure 2. The Nokia
product line 
architecture.Layout manager

User agent

Loader

Browser

Browser
utilities APIs to cache,

persistent
stotage,
memory,

strings, math,
messaging,

settings,
logging,

time, and
so on

Protocol
utilities

Portability layer

Session

Transaction

Security

Datagram

Protocol stack



compact protocol stack. We chose the
generic one. The effort of making platform
specific code generic and portable seemed
to exceed the work needed to tailor an ex-
isting generic stack to meet a small device’s
requirements.

We cleaned, tested, verified, and docu-
mented the acquired components to achieve
product quality. We concluded that inconsis-
tent error handling, memory management,
and coding standards were our most critical
problems. We set up a separate maintenance
project to clean the memory management,
which was all we had time for. 

To achieve product quality, we needed
first to assess existing quality. We needed the
information to focus our development ef-
forts and to set customer expectations right.
We constructed test suites, trained person-
nel, contacted other vendors for interoper-
ability testing, and set up rules and proce-
dures for testing the product line. 

We also created customer documenta-
tion, which was a major effort: none of the
original product line components except the
toolkit had any customer documentation.
To give an idea of the task’s difficulty, the
porting guide for the Nokia Mobile Browser
consists of almost 500 pages, and the
toolkit documentation exceeds 300 pages. 

After eight months of cleanup, imple-
mentation, testing, and documentation, we
released the 1.0 version of the generic
browser product from the product line. We
now had a pool of core assets on which to
build our future products. The fact that
most of our core assets were already being
used in existing products demonstrated that
our technology worked. 

Organization and processes
As I mentioned earlier, the technical prod-

uct line architecture and the developing or-
ganization’s structure must resemble each
other. We had five separate functional enti-
ties in our product line organization:

� Product management collected, ana-
lyzed, and prioritized product require-
ments; created requirements specifica-
tions and roadmaps; and oversaw the
functionality of all products. 

� Product development owned the archi-
tecture and implementation resources
and ran the development projects. 

� System testing tested and released the fi-
nal products. 

� Customer support assisted customers in
using our products.

� Advanced development ran the stan-
dardization work and provided archi-
tectural studies, prototypes, and demon-
strations of new technologies and
features. 

Development took place in the US, but
we developed parts of the product line in
Finland and Hungary. By the end of 2001,
the product line organization employed
over 100 people. We released approxi-
mately six major product releases each year.

Requirements analysis in product 
management

During the analysis phase, a product man-
ager responsible for a specific version of a
product would create a requirement specifica-
tion document that analyzed and prioritized
requirements for the product release in ques-
tion. However, this document didn’t specify
requirements for the whole product line. 

During the first two product projects, we
tried to allocate product requirements di-
rectly to the product line components,
which we soon discovered to be difficult.
Our customers wanted to discuss features
and products, not components. Also, our
product management didn’t have the techni-
cal expertise to allocate product require-
ments to technical components. Thus, we
started to map requirements directly to
product releases. Further allocation to sepa-
rate components happened later in the de-
sign phase. 

Product managers maintained roadmaps
that outlined the characteristics of individ-
ual products for the next few years. The
product board—composed of participants
from all functions of the product line and
from major customers—reviewed all the
roadmaps together. Such review meetings
synchronized different product features: if a
feature appeared first in one product’s
roadmap and then later in others, synchro-
nizing our products provided a means of
domain analysis over all the products we
developed.

Software creation in product development 
Our product development organization

We cleaned,
tested, verified,
and documented

the acquired
components to

achieve product
quality.

7 6 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2



had four teams—namely, the core team, the
platforms team, the toolkit team, and the
testing team. The teams were competency
centers with a certain technical focus, and
they allocated their resources to various
product development projects. 

The core team was further divided into
the browser and protocol teams. These
teams maintained the core product line—
the reusable assets that all the products
used. The platforms team specialized in
porting the core product to the various
hardware and software platforms. The
toolkit team developed the toolkit product.
The testing team maintained the tools and
expertise to test the various products devel-
oped from the product line. 

Product managers defined a product re-
lease’s requirements in a requirement speci-
fication. The engineering teams analyzed
this specification and extracted generic
functionality into the product line core,
with the goal being to make the core as big
as possible. Then, the core team members
within the projects handled the common
core parts while platform and toolkit teams
handled platform- and customer-specific
parts within development projects.

The core team had an architect responsi-
ble for the product line’s architecture. She
used the requirements specifications, her ex-
pertise, and the platforms and toolkit expert-
ise of the other teams to create a functional
specification document. This document was
an engineering view of the requirements and
specified how to develop products and
reusable components. Thus, the core team
maintained the product line architecture. 

We had only a few projects in which to
develop product line components independ-
ently from any product release. Typically, we
allocated product line maintenance work in-
side individual product projects, prioritizing
component development efforts and embed-
ding them into our tightly scheduled product
development projects.5 This ensured strong
product focus but made caring for the prod-
uct line architecture a challenge. 

Our design and implementation phases
of the development projects included several
cycles that resembled other software proj-
ects at Nokia.5,6 First, each new product re-
lease built on the previous one. Second, we
built individual product releases incremen-
tally. Our internal customer often wanted

intermediate releases during the develop-
ment project. Finally, we used daily builds,7

which ensured that one project modifying
the product line would not harm another
concurrent project using the same compo-
nents. Daily builds also let us detect prob-
lems early. 

Developing products from a product line
calls for solid configuration management.
We stored all the phase products such as
documents, test cases, and code in a central-
ized configuration management system. We
shared the system with our internal cus-
tomers who needed early access to the con-
figuration items. 

A test lead developed the initial test plan
based on the functional specification. We
conducted system and interoperability test-
ing as part of the product projects—different
products shared test suites and cases. We
also invested a lot in the implementation of
reusable test suites. They formed an impor-
tant part of the product line’s core assets and
let us reuse test cases, tools, and expertise. 

We originally planned to test software
components independently and then assem-
ble product releases from these tested com-
ponents, but we soon realized that this was
not enough. Every product needed full test-
ing on different operating systems, with dif-
ferent applications and memory constraints.
We never trusted that a component tested in
the context of one product would automat-
ically work in the context of another. In-
stead, we tested all components separately
for each delivered product version, using a
regression testing approach.

A project board run by the product line
management oversaw all the development
projects. It reviewed all projects on a regu-
lar basis to ensure timely and synchronized
project execution, solve resource conflicts
between projects, and assign resources to
work on common tasks outside the product
projects. The board was a key means of
maintaining a coherent product line view
within individual development projects.

Innovation and standardization in advanced
development

Developing products for emerging mar-
kets calls for innovation and standardization.
We had a dedicated advanced development
team that demonstrated new technologies
and provided information and ideas to the

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 7 7

Developing
products from a

product line
calls for solid
configuration
management. 



other teams. The team also provided require-
ments and expertise on emerging standards
to the rest of the organization and worked
within standardization bodies, such as the
WAP forum, to drive standards. 

Our XHTML browsing feature is a good
example of successful innovation and stan-
dardization. To the best of our knowledge,
our product line was the first to provide a
mobile XHTML browser with Cascading
Style Sheet and full WAP 1.x support. Our
advanced development team created the ba-
sic architecture and demonstrated an
XHTML browser for a phone at the end of
2000. The demo provided us with early cus-
tomer feedback and verified that the imple-
mentation was possible within the given
memory and computing restrictions. The
team also worked closely with the product
development that ramped up the XHTML
browser’s development and released the
Nokia Mobile Browser 3.0 in summer
2001. Finally, the team got the core of our
XHTML approach approved as the new
WML 2.0 standard.8 

Benefits versus cost 
A product line increases quality, shortens

time to market, and helps specify the
“right” product features. Strong process
structures help manage complexity and con-
flicts between the requirements of individ-
ual products and projects. Skilled architects
and architectural guidelines can mitigate
challenges in architectural development.

Benefits 
We experienced increased efficiency

through reuse as well as accelerated product
implementation, lowered cost, and in-
creased quality. We could not have devel-
oped four different products and six annual
releases with our given resources without a
product line.

We analyzed requirements originating
from one product in the context of all other
products and used this accumulated domain
understanding to benefit the whole product
line. Such a process helped us identify new
requirements early and let one product bene-
fit from the requirements of others. This also
helped us detail feature sets and build com-
petitive products. Understanding the domain
helped us specify new products accurately. 

The product line provided a clear focus

and set the management, processes, tools,
and other support elements, which attracted
and motivated high-quality personnel. Our
product line was highly rated in our annual
“Nokia Listening to You” questionnaires in
which employees rate their working condi-
tions. We also managed to retain our em-
ployees. In 1999 and 2000, when various
startup companies offered potentially larger
benefits than we did, we lost less than 3 per-
cent of our workforce. That we retained our
key experts and team leaders further in-
creased productivity and motivation.

The product line also increased our cred-
ibility and demonstrated our long-term com-
mitments. Showing different products devel-
oped from the same product line running on
different platforms provided a convincing
demonstration of our technology. Within
Nokia, we became not only the source of
browsers and tools but also a center of ex-
pertise on XML, XHTML, scripting, and
other related technologies.

Costs and risks
Compared to developing a single prod-

uct, the product line required extra re-
sources in process and tools development,
core development, and product manage-
ment. To minimize costs, we avoided devel-
oping core assets that we would not reuse.
For example, we considered a potentially
reusable library with no need for reuse as a
waste. It becomes an inventory that does
not benefit the product line and constrains
the organization’s throughput.9 

We occasionally witnessed cases where
the creation of core assets significantly de-
layed the shipment of the first products to
customers. We considered this to be one of
the biggest risks and prioritized getting
products out quickly—even if such a move
delayed core asset creation. Therefore, we
first built product releases and then ex-
tracted components from them. Only when
a clear case for reuse became apparent did
we incorporate the asset into the core.

We had challenges in developing a coher-
ent product line architecture. Such architec-
ture cannot be optimized for a single product
but must support the conflicting require-
ments of many products. Our architecture
managed to accommodate different product
needs and integrate components originally
developed for different architectures. These

Our XHTML
browsing

feature is a
good example of

successful
innovation and

standardization.

7 8 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2



sources provided us with a head start but
compromised the overall architecture by in-
troducing several different designs and cod-
ing styles within the product line. This was
visible in the context of our generic browser,
which we distributed as a source code prod-
uct. Our customers had to learn different
styles depending on the component they were
integrating or modifying. 

Our product line supported four differ-
ent products by providing them with
reusable core assets, so modifying these as-
sets could potentially affect all products. We
managed such dependencies through con-
trolled requirements management, project
synchronization, configuration manage-
ment, and architecture development. We ex-
pected all teams to follow the documented
software development life cycle, which im-
plemented several milestones with approval
points. Our project board synchronized
projects, and our product board synchro-
nized product roadmaps and features. Our
architect was a gatekeeper, approving all
design and API changes. We also used
strict software configuration management
processes and tools. Changing plans, com-
ponents, or APIs required approvals to be
acquired and communicated appropriately.
All these practices aimed at good quality in
predictable product projects at the expense
of increased bureaucracy.

We also experienced some conflicts be-
tween project teams. Our employees re-
ceived incentives based on releasing their
products on time, yet their work depended
on the product line. We had cases in which
a project team felt that it didn’t get adequate
support from the product line, which made
blaming others for missed delivery dates
easy. We first handled these conflicts
through our project board; later, we added
product line maintenance into our bonus
schemes. However, we never quite managed
to solve conflicts between teams relying on
each other’s work. It seems such conflicts
are built into product lines.

A product line can also cause conflicts
between customers. They do not always
welcome the idea of our developing a prod-
uct line instead of just their product. As an
example, a major customer approved a re-
quirements specification for the next release
of its browser product. Later, we showed
the client a functional specification and

project plans that allocated work to product
line components. The client questioned our
approach, because it wanted us to concen-
trate on its product only. Explaining a prod-
uct line’s benefits to a customer of a single
product was sometimes difficult.

Moreover, testing a product line is more
complex than testing a single software prod-
uct. We must test the product line in its vari-
ous configurations, which easily multiplies
the number of test cases. To manage this
complexity, we system tested individual prod-
uct releases instead of testing the whole prod-
uct line. This kept testing simple and guaran-
teed the quality of product releases. However,
we did not build a pool of tested core assets
ready for integration, which probably in-
creased the need to test each product release.
We had approximately 25 percent of the
product line personnel working on testing
teams, so the testing phase took approxi-
mately 30 percent of the entire time of devel-
oping a software product release. 

F or Nokia, the product line ap-proach’s benefits clearly outnum-bered its costs. We reused our core
assets extensively, and we succeeded in serv-
ing a diverse customer base, from content
developers to device manufacturers and
software companies. Such experiences are
motivating us to launch new product lines
and convert existing activities to use the
product line approach. An important future
challenge—not just for Nokia—is to learn
to reengineer existing product lines to ac-
commodate new business, technical, and
customer requirements.

The product line increased costs in vari-
ous support functions, architectural work,
and management. We therefore suggest that
an organization consider initiating a prod-
uct line only when it both aims at systematic
reuse and serves a heterogeneous customer
base with a common domain. Based on our
experiences, you can achieve fairly high lev-
els of reuse without developing and main-
taining an entire product line—for example,
by using independent code components.5

You might better serve a homogeneous cus-
tomer base by adapting a single product for
different purposes. Moreover, without a
common domain, the pool of core assets

J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 7 9

Testing a
product line is
more complex
than testing a

single software
product.



might not grow big enough to be beneficial.
We believe that a software development

organization should resemble the develop-
ment view to the software architecture.6,10

The processes and organizational structures
must support the product line architecture.
Components must have owners, deliver-
ables must be allocated to teams and proj-
ects to develop them, and the interaction be-
tween teams must resemble the interaction
of the software components in a product
line. Thus, coupling the product line and the
organization is important. They need to de-
velop hand in hand.

Building a product line is a long-term ef-
fort in which the benefits come through reuse,
which can only come after several product re-
leases. We believe that building a few prod-
ucts first is the right way to initiate a product
line. Early products provide customer feed-
back and prevent the construction of useless
assets. A product line needs a long-term man-
agement commitment together with skills to
build it step by step. It is an investment that
can be made if business conditions call for a
long-term commitment to deliver several
products sharing a common domain.

Acknowledgments
I thank my colleagues Raouf Bortcosh, Greg Car-

penter, and Konstantinos Kalabokis at Nokia for
building and managing the product line with me and
helping me write this article. I also thank Ilkka
Haikala and Kai Koskimies at Tampere University of
Technology for their valuable feedback.

References
1. L. Bass et al., Product Line Practice Workshop Report,

CMU/SEI-97-TR-003, Software Eng. Inst., Carnegie
Mellon Univ., Pittsburgh, 1997; www.sei.cmu.edu/
publications/documents/97.reports/97tr003/97tr003abstract.
html.

2. P. Clements and L. Northrop, Software Product Lines:
Practices and Patterns, Addison-Wesley, Reading,
Mass., 2002.

3. Wireless Application Forum, Official Wireless Applica-
tion Protocol: The Complete Standard, John Wiley &
Sons, New York, 1999.

4. World Wide Web Consortium, XHTML 1.0: The Ex-
tensible HyperText Markup Language, 2000; www.w3.
org/TR/xhtml1.

5. M. Laitkorpi and A. Jaaksi, “Extending the Object-Ori-
ented Software Process with Component-Oriented De-
sign,” J. Object-Oriented Programming, vol. 12, no. 1,
Mar./Apr. 1999, pp. 41–50.

6. A. Jaaksi et al., “Tried & True Object Development,”
Industry-Proven Approaches with UML, Cambridge
Univ. Press, Cambridge, UK, 1999.

7. S. McConnell, Rapid Development: Taming Wild Soft-
ware Schedules, Microsoft Press, Redmond, Wash.,
1996.

8. WAP Forum, Wireless Application Protocol, WAP 2.0:
Technical White Paper, Jan. 2002; www.wapforum.
org/what/WAPWhite_Paper1.pdf.

9. E. Goldratt, The Goal—A Process of Ongoing Im-
provement, North River Press, Great Barrington, Mass.,
1992.

10. P.B. Kruchten, “The 4+1 View Model of Architecture,”
IEEE Software, vol. 12, no. 6, Nov./Dec. 1995, pp.
42–50.

For more information on this or any other computing topic, please visit our
Digital Library at http://computer.org/publications/dlib.

8 0 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

About the Author

Ari Jaaksi heads the Nokia Mobile Phones software and protocols research organization in
Finland. His research interests include development methodologies, architectures, and software
development organizations. He received his PhD in software engineering from Tampere Uni-
versity of Technology. Contact him at Nokia Mobile Phones, PO Box 1000, 33721 Tampere,
Finland; ari.jaaksi@nokia.com. 



0 7 4 0 - 7 4 5 9 / 0 2 / $ 1 7 . 0 0  ©  2 0 0 2  I E E E J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 8 1

O
n a recent visit to Norway, I was
served the customary lunch of open-
faced sandwiches. I don’t understand
the logic of the open-faced sand-
wich—all the work of preparing a
sandwich, but you still have to eat it

with a knife and fork. Perhaps the Norwe-
gian that brought the idea of the sandwich
from overseas (our British tradition holds

that the Earl of Sandwich invented
it) simply lost the key instruction:
place another slice of bread on top
so that you can pick it up!

Some Norwegians might feel
the same way about what the rest
of the world did to one of their
great ideas: object-orientation.
Looking at most so-called object-
oriented software, you’d think the
designers had never heard about
the key idea: An object should

model some aspect of the business domain—
not just its attributes and associations—but all
behaviors that might be required of it. This
behavioral completeness yields a big benefit,
in that changes to the business domain map
simply to changes in the software. Actually,
many designers intend to create behaviorally
complete objects, but just as milk degrades
into curds and whey and salad dressing into
oil and vinegar, their software seems almost
inevitably to separate into process and data.

Separating process and data
Several years ago I determined to find out

what caused this. My research identified
several common practices that encourage
the separation of process and data in object-

oriented designs. The problem is that none
of those practices is a bad habit; each was
deliberately designed to overcome some ex-
isting problem with software engineering.

Let’s look at an example. The argument
for the Model-View-Controller pattern and
its close-relation, the Entity-Boundary-Con-
troller pattern is that a given business object
must be viewed on different platforms, in dif-
ferent contexts, and with different visual rep-
resentations. Embedding knowledge of how
to create these different views in business ob-
jects would result in bloated objects with
heavy duplication of functionality. Using
MVC or EBC, the core business objects (that
is, the Model or Entity objects, respectively)
have no knowledge of these different presen-
tations. Dedicated presentation objects (that
is, the View or Boundary objects) specify
what will appear in each view, and know
how to create the visual display and accept
inputs from the user. Controller objects
provide the glue between the two—populat-
ing the views with attributes from the busi-
ness objects and invoking methods on those
objects in response to user-initiated events.

However, there is a marked tendency for
Controller objects to become an explicit
representation of business tasks, managing
the optimized sequence of activities and en-
forcing appropriate business rules. In doing
so, they usurp the business objects’ natural
responsibilities. The presentation objects,
meanwhile, often mix attributes from multi-
ple business objects. Before long, the Entity
or Model objects become the data represen-
tation, and the Controller objects become
the process representation. 

software construction

Naked Objects
Richard Pawson

E d i t o r s :  A n d y  H u n t  a n d  D a v e  T h o m a s  � T h e  P r a g m a t i c  P r o g r a m m e r s
a n d y @ p r a g m a t i c p r o g r a m m e r. c o m  � d a v e @ p r a g m a t i c p r o g r a m m e r. c o m



8 2 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2

DEPT TITLE

Naked Objects
Robert Matthews and I designed

Naked Objects, an open-source Java-
based framework, to discourage pro-
cess and data separation and to en-
courage business system creation
from behaviorally complete objects.
Naked Objects’ key idea is to directly
expose the core business objects (such
as Customer, Product, and Order)
to the user. All user actions consist of
invoking a behavior directly on a
business object, either by selecting an
icon from a pop-up menu or dragging
an object and dropping it on another.
There are no top-level menus, or any
forms or scripts sitting on the objects.
The framework is so radical that it
does not even permit the creation of
dialog boxes.

Applying the principles of Naked 
Objects

One of the first organizations to
apply the design principles embodied
in Naked Objects is the Irish govern-
ment’s Department of Social, Com-
munity, and Family Affairs.  Figure 1
shows a screenshot from a prototype

for a new system, created using
Naked Objects, to replace their exist-
ing Child Benefit Administration sys-
tem.  That system is now in full-scale
development and is near deployment.
Although the user interface differs
slightly from that shown here, the
prototype’s principles have been faith-
fully preserved.  The new architecture,
which mimics that of the Naked Ob-
jects framework but is tailored to the
DSCFA’s own technical environment,
will eventually replace all of their ex-
isting core business systems.

Figure 1 shows several classes of
business objects including Customers
(the mother and children involved in a
claim), Officers, Cases, Payments,
Communications, and Schemes (the
various legislative schemes that the
DSCFA administers—only Child
Benefit is included in this prototype),
which are represented as icons.  Users
can double click on any instance to
show an expanded view, or they can
drag it to the desktop to create a sepa-
rate viewer. Right clicking on any in-
stance, in any context, produces a pop-
up menu of actions, some of which are

generic and some of which are object
specific. These actions all correspond
to methods on the business object. For
a Customer object, specific actions in-
clude Authenticate, Communicate,
and RegisterNewChild. Some ac-
tions perform simple operations on
that object; others initiate more com-
plex transactions.

Users can also initiate behaviors by
dragging and dropping objects on
other objects, or into specific fields
within objects. Dragging a Customer
instance on the Child Benefit class
would cause the system to check if that
customer was already claiming child
benefit. If not, the system initiates a
new claim by creating an instance of
the Child Benefit Scheme, insert-
ing a reference to the Customer object
inside it, and creating a new instance
of Case to track the progress of this
claim. The Case owner is the object
representing the Officer logged into
the system. (The user could also per-
form each action individually and in a
different order).

The system also portrays the busi-
ness object classes directly. A win-
dow on the left lists the six primary
business object classes that constitute
the system. Each class icon has a
pop-up menu of class methods.
These are mostly generic methods,
and include

� Create a new instance of this class 
� Retrieve an existing instance from

storage 
� List instances of this class that

match a set of criteria
� Show any subclasses that are

available to the user

Because there is no other mecha-
nism with which users can initiate a
business action, the programmers de-
veloping an application are forced to
encapsulate all required behavior
with the core business objects. How-
ever, because there is a 1:1 corre-
spondence between the underlying
object model and the user interface,
Naked Objects can auto-generate the
latter from the former. Programmers
do not need to write any user inter-
face code to develop a fully working

SOFTWARE CONSTRUCTION

Figure 1. A prototype for a new government benefits administration
system built using Naked Objects.  All user actions consist of noun-
verb style operations on core business objects.



J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 8 3

DEPT TITLE

application using Naked Objects.
Instead, at runtime the framework’s
generic viewing mechanism uses
Java’s reflection to identify objects’
behaviors and makes these available
to the user. Programmers need only
follow a few simple conventions
when writing business objects in
Java. The Naked Objects framework
effectively provides the View and
Controller roles in generic form—
the programmer writes only the
Model objects.

Most early attempts at auto-gener-
ating a user interface from an under-
lying model, such as some application
generators in the 1980s, produced
spectacularly poor user interfaces.
Naked Objects does rather better.  I
would not suggest that our user inter-
faces are in any sense optimal, but
they are remarkably expressive and
give users a strong sense of control—
what Edwin Hutchins, James Hollan,
and Donald Norman call “direct en-
gagement”1 and Brenda Laurel calls a
“first-person experience.”2 We would
even suggest that much of the efforts
of the human-computer interface
community, which is concerned with
optimizing a user interface design for
a given set of tasks, is actually coun-
terproductive. Who has not experi-
enced the frustration of being man-
aged by an optimized script when
dealing with a customer agent at a
call center, for example?

I don’t mean to suggest that the
user is free to do anything with a
Naked Object system—some con-
straints are genuinely needed. But
these constraints are built into the
business objects, not into the scripted
tasks that usually sit on top of them.
The net effect is similar to using a
drawing program or a CAD system,
but for business transactions.

When developing an application
using Naked Objects, the 1:1 corre-
spondence between the screen repre-
sentation and the underlying model
means that the business objects now
provide a common language for the
user and programmer. The auto-gen-
eration of one from the other shortens
the development cycle to the point
where we can now create prototypes

in real time. Most approaches to rapid
prototyping develop only the users’
view of the system. Using Naked Ob-
jects we are prototyping the object
model simultaneously. With Naked
Objects, the conventional notion of
the user interface simply disappears—
programmers don’t even consider a
user-interface because they don’t have
to develop one and users talk only
about the objects with which they
deal.

New generation of business systems
A handful of commercial organiza-

tions have already started to use
Naked Objects to conceive a new gen-
eration of business systems. In each of
these projects, the organization has
stated that they have never seen such
positive communication between de-
velopers and users during develop-
ment. Developers have praised Naked
Objects for its “flexibility”—quite an
interesting comment given that the
framework doesn’t let them do many
things they are accustomed to doing,
such as customizing the user interface
or writing dialog boxes. (The latter is
a massive constraint and somewhat
difficult to adjust to, but we have
found that it forces you to do a better
object modeling job.) Programmers
frequently comment, “This feels like
what I had in my mind when I first en-

countered OO, and I’ve just realized
how far it is from what we’ve actually
been doing.”

Naked Objects is still in its in-
fancy, but it is developing rapidly. We
have much that we still want to do
with the framework. We are starting
to get offers of help from others who
are catching the vision. What pleases
us most is that the framework gets
simpler with every iteration. You can
read more about the design princi-
ples behind Naked Objects and
download the Java framework from
www.nakedobjects.org.

Antoine de Saint Exupery wrote
that “In anything at all, perfection is
finally achieved not when there is no
longer anything to add, but when
there is no longer anything to take
away, when a body has been stripped
down to its nakedness.” This princi-
ple has been one of the inspirations
for Naked Objects. I remain to be
convinced about the merit of naked
sandwiches, though. 

References
1. E. Hutchins, J. Hollan, and D. Norman, “Di-

rect Manipulation Interfaces,” User Centered
System Design: New Perspectives on Human-
Computer Interaction, D. Norman and S.
Draper, eds., Lawrence Erlbaum, Hillsdale,
N.J., 1986, p. 94.

2. B. Laurel, Computers as Theatre, Addison-
Wesley, Reading, Mass., 1991, pp. 116–119.

Richard Pawson is a research fellow with Computer
Sciences Corporation. He has a BSc in engineering science and is
currently earning a PhD in computer science at Trinity College,
Dublin. He is coauthor of Naked Objects with Robert Matthews,
which will be published by Wiley in November 2002. Contact
him at CSC Research Services, 70 Wilson St., London EC2A 2DB,
UK; rpawson@csc.com.

SOFTWARE CONSTRUCTION

“In anything at all,
perfection is finally
achieved not when 
there is no longer
anything to add, 

but when there is no
longer anything to 

take away, 
when a body has been

stripped down to 
its nakedness.”



8 4 I E E E  S O F T W A R E J u l y / A u g u s t  2 0 0 2 0 7 4 0 - 7 4 5 9 / 0 2 / $ 1 7 . 0 0  ©  2 0 0 2  I E E E

I
recently attended a workshop where I
found myself sitting between people
from Disney and the Nuclear Regula-
tory Commission. What do these un-
likely companions have in common?
They’re both concerned about the

safety of the software they produce. Given
that people can suffer when software fails,
this multi-industry concern makes sense.

We can argue that we must be
doing a good job because we don’t
find many software casualties. Ac-
cidents are the sixth leading cause
of death in the United States.
However, if you scan the statistics,
you’ll be hard pressed to find any-
one blaming software. With the
possible exceptions of the Therac-
25 radiation therapy machine
overdoses in the mid-1980s or the
Osprey crash in 2000, it’s hard to

make a case for many people being injured, let
alone killed, by software. Part of this, I think,
is a matter of perception.

Hurdles
I’ve identified four issues that prevent

software safety from sometimes getting the
attention it deserves.

1. Safety is often confused with security and
reliability.

Safety is freedom from the conditions that
cause accidents. This is a separate idea from
security, a system’s ability to resist attempts
to influence its operation, or reliability, a sys-
tem’s ability to continue to provide function-
ality. The confusion arises because safe sys-

tems are usually secure and reliable. Safety
means worrying about what the system
should, might, and shouldn’t do. In my days
as a software applications manager, I ob-
served that our users could abuse our prod-
ucts in ways that the developers never imag-
ined. Safety requires you to think about every
conceivable way a system might cause harm.

2. Safety is viewed as a system-level problem.
We regulate medical devices, not the soft-

ware itself. Similarly, we certify aircraft, not
the software that they carry. If a robot goes
out of control and injures someone, we
blame the robot first and not its program-
ming. Consequently, we direct most safety
analysis at the system level and the hard-
ware that comprises the system. This can
overlook faulty software that might have
commanded an unsafe action.

3. Software failures are subtle.
Hardware failures are easy to spot—

cracked structural elements or burned-out
electronics are dead giveaways that some-
thing’s gone wrong. Software doesn’t fail like
hardware, and software failures are usually
not so obvious. A software routine will gen-
erate the same output, given the same input,
consistently. However, software can fail to
perform its intended function if it contains
requirements, design, or logic errors. You can
easily spot logic errors, such as if you code a
program to believe that 1 + 1 = 3 instead of
2, but requirements or design errors are
harder to find. Frequently, we don’t spot the
most fundamental errors until well into the
test phase, when the cost of repair is high.

quality time

Software Safety
Alan C. Tribble

E d i t o r :  J e f f r e y  Vo a s  � C i g i t a l  � v o a s @ c i g i t a l . c o m



J u l y / A u g u s t  2 0 0 2 I E E E  S O F T W A R E 8 5

QUALITY TIME

4. Safety can’t be proven.
Festus, the lovable, illiterate deputy

from the old TV show Gunsmoke, of-
ten justified his illiteracy by asking,
“How do you know the fellow that
wrote the writin’, wrote the writin’
right?” Your customers probably ask
you, “How do you know the fellow
that coded the coding, coded the cod-
ing correctly?” Exhaustive testing is
usually infeasible, so you can’t always
demonstrate compliance for every
possible situation. What you can do is
show that the code functions prop-
erly—and doesn’t exhibit anomalous
behavior—for the situations you’ve
tested. Similarly, you can’t prove
safety. You can only show that you
haven’t found the software exhibiting
any behavior that would compromise
safety.

Predictions
In spite of these limitations, soft-

ware safety has a good track record,
and as software developers, we want
to make sure it stays that way. Unfor-
tunately, change is inevitable. The
earliest systems were inherently sim-
ple, independent, and understand-
able. However, customers want addi-
tional functionality, so systems will
continue to become more complex.
As system complexity grows, so will
software complexity. This leads to
my software safety predictions.

1. Software will grow in importance.
As software assumes greater re-

sponsibility in more and more sys-
tems, safety analysis will have to ex-
amine not only the hardware but
also the software. This will mean in-
cluding software in standard safety
analysis techniques, such as failure
mode and effects analysis or fault
tree analysis.

2. Software designers will spend more
time worrying about failure modes.

Safety analysis starts with hazard
analysis—identifying what can go
wrong and how bad it will be. Ana-
lyzing failure requires a different
mind-set. If you focus on success, you
only think of ways to build something.
When you start considering the possi-

bility of failure, you have to wonder
how it could come apart. Software de-
signers will need to consider not only
what code should do but also what it
could and shouldn’t do.

3. The search for errors will move 
upstream.

As requirements and design errors
become more costly, software safety
analysis will start moving upstream.
Testing finished code functionality
won’t stop, but we’ll start testing its
design and requirements. Designers
will start modeling requirements and
seek to prove their completeness and
correctness before writing a line of
code. This will require a shift to
model-based development. Analysis of
all forms, including formal methods,
will become routine.

4. Showing process compliance won’t
be enough.

You can’t build in safety after the
fact. You need to address it from day
one. If you’re going to put a flight
control system on a new aircraft, the
US Federal Aviation Administration
must approve the software. Today,
the FAA’s regulating document, DO-
178B, doesn’t control the final prod-
uct as much as the process to create
the product. The more safety-critical
the software, the more rigorously
controlled the process. DO-178B
mandates 66 compliance objectives
for the most critical (Level A) soft-
ware. You can’t throw together a pile
of spaghetti code and go back after
the fact and expect to show compli-
ance. To have a chance of success,
you’d have to start over, showing con-
trol over the process from day one.
But process-based compliance, al-
though necessary, will not suffice.
We’ll need to show not only that we
exhibited good software engineering
design practices, but that the product
satisfies its safety requirements.

Alan C. Tribble is a principal systems engineer at Rock-
well Collins. Contact him at 400 Collins Road, NE (108-206),
Cedar Rapids, IA 52498; actribbl@rockwellcollins.com; www.
atribble.com.


