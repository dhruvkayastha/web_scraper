***Application lifecycle management***
Application lifecycle management  ( ALM ) is the product lifecycle management (governance, development, and maintenance) of computer programs. It encompasses requirements management, software architecture, computer programming, software testing, software maintenance, change management, continuous integration, project management, and release management. 

 **ALM vs. Software Development Life Cycle**

 ALM is a broader perspective than the Software Development Life Cycle (SDLC), which is limited to the phases of software development such as requirements, design, coding, testing, configuration, project management, and change management. ALM continues after development until the application is no longer used, and may span many SDLCs.
 

 **Integrated ALM**

 Modern software development processes are not restricted to the discrete ALM/SDLC steps managed by different teams using multiple tools from different locations. Real-time collaboration, access to centralized data repository, cross-tool and cross-project visibility, better project monitoring and reporting are the key to develop quality software in less time. This has given rise to the practice of integrated application lifecycle management, or integrated ALM, where all the tools and tools' users  are synchronized with each other throughout the application development stages. This integration ensures that every team member knows Who, What, When, and Why of any changes made during the development process and there is no last minute surprise causing delivery delays or project failure. Today's application management vendors focus more on API management capabilities for third party best-of-breed tool integration which ensures that organizations are well-equipped with an internal software development system that can easily integrate with any IT or ALM tools needed in a project. A research director with research firm Gartner proposed changing the term ALM to ADLM (Application Development Life-cycle Management) to include DevOps, the software engineering culture and practice that aims at unifying software development (Dev) and software operation (Ops). 

 